<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/categories/c/</link>
    <description>Recent content in C on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Jun 2012 14:23:33 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/categories/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pointer Pointer #2</title>
      <link>https://www.andrewcbancroft.com/blog/musings/pointer-pointer-2/</link>
      <pubDate>Sun, 24 Jun 2012 14:23:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/musings/pointer-pointer-2/</guid>
      <description>Pointer Pointer #1 can be found here – it deals with how the &amp;ldquo;*&amp;#8221; symbol is used in different places when dealing with pointers.
A second pointer I have on pointers that helped me is this:
A pointer stores an address of where some piece of data &amp;ldquo;lives&amp;#8221; (begins its bit pattern) in memory. What recently became clear to me is that a pointer, itself,_ _is also stored as a bit pattern in memory.</description>
    </item>
    
    <item>
      <title>Pointer Pointer #1</title>
      <link>https://www.andrewcbancroft.com/blog/musings/pointer-pointer-1/</link>
      <pubDate>Sun, 17 Jun 2012 19:45:05 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/musings/pointer-pointer-1/</guid>
      <description>Part of my confusion with the C family of languages has been how the * symbol worked in the various places it&amp;rsquo;s used in relation to pointers. A key insight helped de-mystify a lot for me:
The * symbol is used as both a type declaration _and_ as an operator (the de-reference operator).
 Example:  // * used as a type declaration int *intPointer;
// declare a regular integer variable named i int i = 10; // set where intPointer points to by assigning it the address of i intPointer = &amp;amp;i; // * used as the de-reference operator printf(&amp;quot;Value returned when intPointer is de-referenced: %dn&amp;quot;, *intPointer);  ```</description>
    </item>
    
  </channel>
</rss>