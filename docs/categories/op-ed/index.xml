<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Op-Ed on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/categories/op-ed/</link>
    <description>Recent content in Op-Ed on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Nov 2014 01:58:04 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/categories/op-ed/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Agile Blogging</title>
      <link>https://www.andrewcbancroft.com/2014/11/20/agile-blogging/</link>
      <pubDate>Fri, 21 Nov 2014 01:58:04 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/11/20/agile-blogging/</guid>
      <description>After I wrote my post on 7 Reasons You Should Write About Swift, I began to think about some of the roadblocks that hinder blogging.
Blog Blockers I started to think about some of my own reservations about blogging, and boiled it down to a couple of big blockers:
 Time Perfectionism  My problems with blogging in the past often came down to the fact that it takes time, and that if was going to publish something, it had to be perfect.</description>
    </item>
    
    <item>
      <title>Replace Magic Strings with Enumerations in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/09/02/replace-magic-strings-with-enumerations-in-swift/</link>
      <pubDate>Wed, 03 Sep 2014 01:55:54 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/09/02/replace-magic-strings-with-enumerations-in-swift/</guid>
      <description>&amp;#8220;What can I do to avoid these &amp;#8216;magic strings&amp;#8217; in my code?&amp;#8221; &amp;#8211; This was the question I asked myself recently as I found myself in prepareForSegue comparing segue.segueIdentifier to in-line hard-coded Strings. This kind of in-line hard-coding of a String for comparison purposes is what I mean by &amp;#8220;magic strings&amp;#8221; in this article. I knew this felt like a bad idea, but the solution to a cleaner option wasn&amp;#8217;t readily apparent to me.</description>
    </item>
    
    <item>
      <title>Pick a Delegate… Any Delegate… On Clean View Controllers in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/08/26/pick-a-delegate-clean-view-controllers-in-swift/</link>
      <pubDate>Wed, 27 Aug 2014 04:43:29 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/26/pick-a-delegate-clean-view-controllers-in-swift/</guid>
      <description>The delegation pattern is ubiquitous in iOS development &amp;#8211; the pattern is&amp;nbsp;a &amp;#8220;core competency&amp;#8221; for developing in Cocoa, and if you program with the iOS SDK for any length of time and you&amp;#8217;ll end up writing some code that&amp;nbsp;resembles&amp;nbsp;someInstance.delegate = someDelegate.
One of the toughest things that I&amp;#8217;ve experienced is choosing what someDelegate&amp;nbsp;is. &amp;nbsp;All too often, a&amp;nbsp;View Controller ends up being assigned the responsibility of&amp;nbsp;being the delegate for everything in its hierarchy.</description>
    </item>
    
    <item>
      <title>Expanded Thoughts on Swift’s Type Inference</title>
      <link>https://www.andrewcbancroft.com/2014/08/20/expanded-thoughts-on-swifts-type-inference/</link>
      <pubDate>Thu, 21 Aug 2014 02:19:45 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/20/expanded-thoughts-on-swifts-type-inference/</guid>
      <description>In my recent op-ed on clean coding in Swift focused on Type Inference, I began by saying,
 Quick! Tell me! What is the Type of the birdDetails constant in this code example:
let birdDetails = birdDetailsFromStorage() With no additional context to glean information from, the correct answer to the question is, &amp;#8220;I have absolutely no clue&amp;#8230;&amp;#8221;
 But is that concluding assertion true? Hmm&amp;#8230;
I&amp;#8217;m learning, and as I&amp;#8217;ve weighed a recent Twitter conversation and thought on a comment thread that Rob Napier made on the post quoted above, I&amp;#8217;m compelled to expand a little on my first post on Type Inference as it relates to clean code in Swift.</description>
    </item>
    
    <item>
      <title>Clean Coding in Swift – Type Inference</title>
      <link>https://www.andrewcbancroft.com/2014/08/12/clean-coding-in-swift-type-inference/</link>
      <pubDate>Wed, 13 Aug 2014 04:22:25 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/12/clean-coding-in-swift-type-inference/</guid>
      <description>Quick! Tell me! What is the Type of the birdDetails constant in this code example:
let birdDetails = birdDetailsFromStorage() With no additional context to glean information from, the correct answer to the question is, &amp;#8220;I have absolutely no clue&amp;#8230;&amp;#8221; Or is it?
&amp;#8220;Not fair!&amp;#8221;, you say. &amp;#8220;In the real world, I&amp;#8217;d have the ability to option-click and learn the type from a pop-up tooltip, or learn this information by inspection from XCode&amp;#8217;s utilities panel.</description>
    </item>
    
    <item>
      <title>Clean Coding in Swift – Functions</title>
      <link>https://www.andrewcbancroft.com/2014/08/07/clean-coding-in-swift-functions/</link>
      <pubDate>Thu, 07 Aug 2014 18:16:23 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/07/clean-coding-in-swift-functions/</guid>
      <description>I&amp;#8217;ve been thinking a lot about how the principles of clean coding (Bob Martin&amp;#8217;s &amp;#8220;Clean Code&amp;#8220;) apply in Swift. How do I express clean code in this language? Conversely, how do I avoid writing cryptic code in Swift? What language features help me write clear and self-explanatory code and what language features present the potential for tempting me to write obscure code in Swift?
I am beginning a commentary series that I hope will encourage clean coding practice in myself and in the Swift developer community.</description>
    </item>
    
    <item>
      <title>Contributing My Share of Bytes</title>
      <link>https://www.andrewcbancroft.com/2012/06/03/contributing-my-share-of-bytes/</link>
      <pubDate>Mon, 04 Jun 2012 03:16:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2012/06/03/contributing-my-share-of-bytes/</guid>
      <description>There is a lot to know. A lot.
I happen to be one of those individuals who gets geeked out very, very often over very, very nerdy things.
As of late I&amp;#8217;ve been really wanting an outlet to share what I&amp;#8217;ve learned / am learning. The world doesn&amp;#8217;t need another blog detailing the same things that are already out there &amp;#8211; at least not a verbatim copy of information that&amp;#8217;s available already.</description>
    </item>
    
  </channel>
</rss>