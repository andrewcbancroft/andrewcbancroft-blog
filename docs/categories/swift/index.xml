<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/categories/swift/</link>
    <description>Recent content in Swift on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Apr 2019 10:03:33 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/categories/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>iOS Data Persistence: The Big Picture</title>
      <link>https://www.andrewcbancroft.com/2019/04/30/ios-data-persistence-the-big-picture/</link>
      <pubDate>Tue, 30 Apr 2019 10:03:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2019/04/30/ios-data-persistence-the-big-picture/</guid>
      <description>We&amp;#8217;ve all been there. Do a search on the topic of &amp;#8220;saving data in iOS&amp;#8221; and you&amp;#8217;ll get dozens of search results mentioning at least six different frameworks and platforms, and a month’s worth of reading.
Wouldn&amp;#8217;t it be nice to distill the possibilities down into just what you need in order to start down a path for persisting data in your app?
&amp;#8220;iOS Data Persistence: The Big Picture&amp;#8221; will be worth the hour of your time.</description>
    </item>
    
    <item>
      <title>CloudKit Fundamentals</title>
      <link>https://www.andrewcbancroft.com/2018/09/24/cloudkit-fundamentals/</link>
      <pubDate>Mon, 24 Sep 2018 17:58:49 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2018/09/24/cloudkit-fundamentals/</guid>
      <description>I&amp;#8217;ve been hard at work on a new course for Pluralsight called &amp;#8220;CloudKit Fundamentals&amp;#8220;, and I&amp;#8217;m thrilled to announce that the course is now LIVE in the Pluralsight library!
At the core of developing a seamless and collaborative data sharing experience for Apple’s platforms is a thorough knowledge of CloudKit.
In this course, you’ll learn to leverage Apple’s flagship framework to achieve your app’s remote data storage and data sharing requirements.</description>
    </item>
    
    <item>
      <title>Do Core Data Entities Need Primary Keys?</title>
      <link>https://www.andrewcbancroft.com/2018/08/10/core-data-entities-need-primary-keys/</link>
      <pubDate>Fri, 10 Aug 2018 22:31:47 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2018/08/10/core-data-entities-need-primary-keys/</guid>
      <description>In this video I pop the hood on Core Data&amp;#8217;s SQLite persistent store to discover the details about whether or not you need to add a property representing a &amp;#8220;primary key&amp;#8221; for your Core Data Entities. Take a look and be sure to subscribe for to stay connected to future screen casts!
 Transcript I had a question asked to me recently to the effect of… “Do I need to create a Primary Key property when I model my Core Data Entities?</description>
    </item>
    
    <item>
      <title>The Case for CloudKit</title>
      <link>https://www.andrewcbancroft.com/2018/08/06/case-for-cloudkit/</link>
      <pubDate>Mon, 06 Aug 2018 11:58:32 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2018/08/06/case-for-cloudkit/</guid>
      <description>Jump to&amp;#8230;   Developing for Apple Platforms Only?   Expand Beyond Apple Platforms with CloudKit JS   Want Built-in Authentication?   CloudKit is Free for Longer   Rolling Your Own Backend?   Company Requirement: 1st Party Frameworks and Services Only?   Personal 3rd Party Risk Aversion?   Only Need a Remote Data Store? Keep it Simple.   Depend On What Apple Depends On&amp;#8230;   Tradeoffs    No Native Android support   Data storage and sharing only with CloudKit</description>
    </item>
    
    <item>
      <title>Swift Cheat Sheet for iPhone Location Services Access &amp; Usage</title>
      <link>https://www.andrewcbancroft.com/2018/07/16/swift-cheat-sheet-iphone-location-access-usage/</link>
      <pubDate>Tue, 17 Jul 2018 00:43:03 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2018/07/16/swift-cheat-sheet-iphone-location-access-usage/</guid>
      <description>This is a cheat sheet of the code and workflow for iPhone location access and usage, from requesting permission to using the location of the user&amp;#8217;s device.
Jump to&amp;#8230;   Framework Import   Set Location Usage Description in Info.plist   Initialize CLLocationManager and Implement CLLocationManagerDelegate   Start Location Services, Check Location Authorization Status, Request Permission   Alert Location Access Needed   Use the User&amp;#8217;s Location   Was this article helpful?</description>
    </item>
    
    <item>
      <title>Swift Cheat Sheet for iPhone Camera Access &amp; Usage</title>
      <link>https://www.andrewcbancroft.com/2018/02/24/swift-cheat-sheet-for-iphone-camera-access-usage/</link>
      <pubDate>Sat, 24 Feb 2018 12:23:02 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2018/02/24/swift-cheat-sheet-for-iphone-camera-access-usage/</guid>
      <description>This is a cheat sheet of the code and workflow for iPhone camera access and usage, from requesting permission to using the photo taken with a user&amp;#8217;s device.
Jump to&amp;#8230;   Framework Import   Set Camera Usage Description in Info.plist   Check and Respond to Camera Authorization Status   Request Camera Permission   Present Camera   Alert Camera Access Needed   Use the Captured Image    UIImagePickerControllerDelegate</description>
    </item>
    
    <item>
      <title>Swift 4 Upgrade Error: ‘init(colorLiteralRed:green:blue:alpha:)’ is unavailable</title>
      <link>https://www.andrewcbancroft.com/2018/01/24/swift-4-upgrade-uicolor-init-unavailable/</link>
      <pubDate>Wed, 24 Jan 2018 12:35:04 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2018/01/24/swift-4-upgrade-uicolor-init-unavailable/</guid>
      <description>I upgraded a project to Swift 4 today and hit a compiler error:
 &amp;#8216;init(colorLiteralRed:green:blue:alpha:)&amp;#8217; is unavailable: This initializer is only meant to be used by color literals.
 The fix is pretty simple: Don&amp;#8217;t use that initializer! (thank you, Captain Obvious!)
The correct initializer to use for specifying a red, green, blue, and alpha to get a UIColor instance in Swift 4 is:
UIColor(red:green:blue:alpha:)
So essentially, just replace colorLiteralRed:, and replace it with just red:, and the compiler error will go away.</description>
    </item>
    
    <item>
      <title>Local Receipt Validation for iOS in Swift From Start to Finish</title>
      <link>https://www.andrewcbancroft.com/2017/08/01/local-receipt-validation-swift-start-finish/</link>
      <pubDate>Tue, 01 Aug 2017 17:55:09 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/08/01/local-receipt-validation-swift-start-finish/</guid>
      <description>Local receipt validation in Swift doesn&amp;#8217;t seem to be widely written about. I&amp;#8217;ve been able to find snippets of code scattered across the Internet, but nothing that brought everything together in one spot so that I could wrap my head around the whole process.
I&amp;#8217;ve been working on some code for a while, and this post is my attempt to bring it all together from start to finish.
I&amp;#8217;ve written seven guides that will take you from preparing to test receipt validation, all the way through to working with the result of the receipt validation process to enable/disable features of your app.</description>
    </item>
    
    <item>
      <title>Finalizing Receipt Validation in Swift – Computing a GUID Hash</title>
      <link>https://www.andrewcbancroft.com/2017/07/31/finalizing-receipt-validation-in-swift-computing-a-guid-hash/</link>
      <pubDate>Mon, 31 Jul 2017 12:36:26 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/07/31/finalizing-receipt-validation-in-swift-computing-a-guid-hash/</guid>
      <description>The aim of this guide is to help you finalize the receipt validation process by computing the GUID hash for your app, and comparing it to the hash that&amp;#8217;s stored within your receipt itself.
This is a continuation of my receipt validation series. I&amp;#8217;m assuming that&amp;#8230;
 You&amp;#8217;ve prepared to test receipt validation by setting up your app in iTunes Connect. You&amp;#8217;ve brought in a cryptography library like OpenSSL to be able to work with the PKCS #7 container that acts as the &amp;#8220;envelope&amp;#8221; for the receipt.</description>
    </item>
    
    <item>
      <title>Receipt Validation –  Parse and Decode a Receipt with Swift</title>
      <link>https://www.andrewcbancroft.com/2017/07/27/receipt-validation-parsing-a-receipt-with-swift/</link>
      <pubDate>Fri, 28 Jul 2017 03:41:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/07/27/receipt-validation-parsing-a-receipt-with-swift/</guid>
      <description>The aim of this guide is to help you parse a receipt and decode it so that you have readable pieces of metadata to inspect and finalize all of the receipt validation steps.
This is a continuation of my receipt validation series. I&amp;#8217;m assuming that&amp;#8230;
 You&amp;#8217;ve prepared to test receipt validation by setting up your app in iTunes Connect. You&amp;#8217;ve brought in a cryptography library like OpenSSL to be able to work with the PKCS #7 container that acts as the &amp;#8220;envelope&amp;#8221; for the receipt.</description>
    </item>
    
    <item>
      <title>Receipt Validation – Verifying a Receipt Signature in Swift</title>
      <link>https://www.andrewcbancroft.com/2017/07/16/receipt-validation-verifying-a-receipt-signature-in-swift/</link>
      <pubDate>Sun, 16 Jul 2017 21:43:21 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/07/16/receipt-validation-verifying-a-receipt-signature-in-swift/</guid>
      <description>You&amp;#8217;ve prepared to test receipt validation by setting up your app in iTunes Connect. You&amp;#8217;ve brought in a cryptography library like OpenSSL to be able to work with the PKCS #7 container that acts as the &amp;#8220;envelope&amp;#8221; for the receipt. Perhaps you&amp;#8217;ve even done it the &amp;#8220;easy way&amp;#8221; with CocoaPods. You&amp;#8217;ve located and loaded the receipt for validation. You&amp;#8217;ve extracted the PKCS #7 container.  The aim of this guide is to help you take a look inside the PKCS #7 container, and verify the presence and authenticity of the signature on the receipt.</description>
    </item>
    
    <item>
      <title>Using an Existing SQLite Store with NSPersistentContainer</title>
      <link>https://www.andrewcbancroft.com/2017/07/10/using-an-existing-sqlite-store-with-nspersistentcontainer/</link>
      <pubDate>Mon, 10 Jul 2017 18:02:05 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/07/10/using-an-existing-sqlite-store-with-nspersistentcontainer/</guid>
      <description>If you&amp;#8217;ve been creating the Core Data Stack without NSPersistentContainer and you&amp;#8217;re thinking about switching things up to use NSPersistentContainer, you need to think about your existing SQLite persistent store.
Creating the stack with NSPersistentContainer handles the creation of SQLite stores internally, so brand new setups using NSPersistentContainer are pretty easy.
But how do you go about telling NSPersistentContainer about your existing SQLite store?
Let&amp;#8217;s take a look now at how you can configure the container to use your previously-created persistent store.</description>
    </item>
    
    <item>
      <title>Why is it called a “Closure” anyway? A Swift Conceptual Look.</title>
      <link>https://www.andrewcbancroft.com/2017/06/05/why-is-it-called-a-closure-anyway-a-swift-conceptual-look/</link>
      <pubDate>Tue, 06 Jun 2017 04:00:41 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/06/05/why-is-it-called-a-closure-anyway-a-swift-conceptual-look/</guid>
      <description>What&amp;#8217;s in a name? If a programming language comes with a named feature, you can be pretty sure it was named that way for a reason. It&amp;#8217;s a safe bet that the language designers were purposeful in their naming, so if you can figure out that essential &amp;#8220;Why&amp;#8217;d they name it that?&amp;#8221; question, you might be that much closer to understanding the feature or concept.
Jump to&amp;#8230;   What&amp;#8217;s in a name?</description>
    </item>
    
    <item>
      <title>A Swift Implementation of the Core Data Stack Using NSPersistentContainer</title>
      <link>https://www.andrewcbancroft.com/2017/05/15/a-swift-implementation-of-the-core-data-stack-using-nspersistentcontainer/</link>
      <pubDate>Mon, 15 May 2017 18:19:46 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/05/15/a-swift-implementation-of-the-core-data-stack-using-nspersistentcontainer/</guid>
      <description>If you&amp;#8217;re targeting iOS 10 and above, you&amp;#8217;ve got the opportunity to pick your poison when it comes to creating the Core Data stack.
You could opt for the process I described in Creating the Core Data Stack with Backwards Compatibility in Swift &amp;#8212; that process still works perfectly fine in iOS 10+.
Alternatively, you could use the new NSPersistentContainer class if you want to write a few less lines of code and keep up-to-date with the latest framework enhancements!</description>
    </item>
    
    <item>
      <title>Why Do We Need to Annotate Escaping Closures in Swift?</title>
      <link>https://www.andrewcbancroft.com/2017/05/11/why-do-we-need-to-annotate-escaping-closures-in-swift/</link>
      <pubDate>Thu, 11 May 2017 17:58:46 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/05/11/why-do-we-need-to-annotate-escaping-closures-in-swift/</guid>
      <description>My last entry on escaping closures ended up having way more interaction than I anticipated! It goes to show that you never know what the impact of a piece of writing will have. But that&amp;#8217;s a different story&amp;#8230; :]
Several readers commented here and on Medium with the question, &amp;#8220;Why? Why do we need to mark escaping closures with @escaping?&amp;#8221;
Jump to&amp;#8230;   Do it yourself, compiler!   Insight from the Swift gurus   I see what you did there&amp;#8230; Let me help you out&amp;#8230;   How helpful is it, really?</description>
    </item>
    
    <item>
      <title>What in the World is an “Escaping Closure” in Swift?</title>
      <link>https://www.andrewcbancroft.com/2017/04/26/what-in-the-world-is-an-escaping-closure-in-swift/</link>
      <pubDate>Wed, 26 Apr 2017 14:41:07 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/04/26/what-in-the-world-is-an-escaping-closure-in-swift/</guid>
      <description>If you&amp;#8217;re mostly in the business of coding up closures to pass off to other functions as callbacks, you may not have run into the concept of an &amp;#8220;escaping closure&amp;#8221; yet.
When you step out of the role of consuming other peoples&amp;#8217; APIs in to the realm of creating your own (and you do this all the time!), this is where you&amp;#8217;ll likely run into the concept of an &amp;#8220;escaping closure&amp;#8221; in certain scenarios.</description>
    </item>
    
    <item>
      <title>Core Data Model Attributes and NSManagedObject Property Types Must Match!</title>
      <link>https://www.andrewcbancroft.com/2017/04/23/core-data-model-attributes-and-nsmanagedobject-property-types-must-match/</link>
      <pubDate>Sun, 23 Apr 2017 20:03:34 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/04/23/core-data-model-attributes-and-nsmanagedobject-property-types-must-match/</guid>
      <description>Jump to&amp;#8230;   Data model Attributes and NSManagedObject property types &amp;#8211; Match &amp;#8217;em!   Optionals are Types   Lessons learned   Was this article helpful? Please share!   Learning Core Data? Watch my course, Core Data Fundamentals with Swift!   
I admit &amp;#8211; it might have taken me less time to figure out my runtime exception if I hadn&amp;#8217;t just migrated my project to Swift 3 when I encountered the bug.</description>
    </item>
    
    <item>
      <title>How to Unwrap Multiple Optionals with One If-Let in Swift</title>
      <link>https://www.andrewcbancroft.com/2017/04/19/how-to-unwrap-multiple-optionals-with-one-if-let-in-swift/</link>
      <pubDate>Wed, 19 Apr 2017 17:25:41 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/04/19/how-to-unwrap-multiple-optionals-with-one-if-let-in-swift/</guid>
      <description>What do you do when you&amp;#8217;ve got two (or more) optionals that you need to safely unwrap and work with?
Code examples Suppose that you&amp;#8217;ve got two arrays, both of which are optional. What I want to do right now is walk through a couple of scenarios where I unwrap them at the same time and print them to the console with a single if-let statement.
First, watch how it&amp;#8217;s done to accomplish the goal of this article&amp;#8217;s title.</description>
    </item>
    
    <item>
      <title>Creating the Core Data Stack with Backwards Compatibility in Swift</title>
      <link>https://www.andrewcbancroft.com/2017/04/16/creating-the-core-data-stack-with-backwards-compatibility-in-swift/</link>
      <pubDate>Sun, 16 Apr 2017 21:23:46 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/04/16/creating-the-core-data-stack-with-backwards-compatibility-in-swift/</guid>
      <description>In 2017, we live in a world where there are still non-iOS 10 devices out in the wild. If your app is targeting an iOS version earlier than iOS 10, or macOS Sierra (10.12), you&amp;#8217;ll be unable to take advantage of Core Data&amp;#8217;s latest &amp;#8220;stack creation&amp;#8221; class called NSPersistentContainer. So what can you do?
While NSPersistentContainer does aim to simplify the stack creation process, at the end of the day, it&amp;#8217;s not terrible to have to mess with some of this Core Data plumbing.</description>
    </item>
    
    <item>
      <title>Swift Tip – Accessing a User’s Documents Directory with URL Extension</title>
      <link>https://www.andrewcbancroft.com/2017/04/10/swift-tip-accessing-a-users-documents-directory-with-url-extension/</link>
      <pubDate>Mon, 10 Apr 2017 18:01:23 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/04/10/swift-tip-accessing-a-users-documents-directory-with-url-extension/</guid>
      <description>When you need to access the documents directory on a user&amp;#8217;s device, what do you do?
In the past, I know I&amp;#8217;ve gotten used to typing out the same set of code over and over throughout my apps. I know, I know &amp;#8211; DRY &amp;#8211; don&amp;#8217;t repeat yourself.
One way to simplify this is to use a Swift extension to URL. Doing this will help you centralize where this code is located in your app, and keep your code DRY.</description>
    </item>
    
    <item>
      <title>Core Data Fundamentals with Swift</title>
      <link>https://www.andrewcbancroft.com/2017/04/02/core-data-fundamentals-swift/</link>
      <pubDate>Sun, 02 Apr 2017 22:04:02 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/04/02/core-data-fundamentals-swift/</guid>
      <description>Core Data is an extremely powerful framework for managing and persisting data on your users&amp;#8217; devices. And let&amp;#8217;s face it: saving data to your users&amp;#8217; devices is inevitable. The question is, which data management and persistence technology you use when the time comes for you to tackle this challenge?
I&amp;#8217;ve been hard at work on a new course for Pluralsight called &amp;#8220;Core Data Fundamentals with Swift&amp;#8220;, and the best news is that it&amp;#8217;s now LIVE in the Pluralsight library!</description>
    </item>
    
    <item>
      <title>Core Data: Solving Ambiguous Type / Redeclaration of Type</title>
      <link>https://www.andrewcbancroft.com/2017/03/28/core-data-solving-ambiguous-type-redeclaration-of-type/</link>
      <pubDate>Wed, 29 Mar 2017 02:57:05 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/03/28/core-data-solving-ambiguous-type-redeclaration-of-type/</guid>
      <description>I just finished roasting some coffee from Peru. I&amp;#8217;ve never had it before, but it got me thinking about my Roaster On the Go &amp;#8220;app&amp;#8221; as I thought about the context that I could use to show you the solution to the compiler error described in the title. I used this to demonstrate Working with Unwind Segues Programmatically in Swift, but now I&amp;#8217;m going to use it to show you how to resolve these errors that can crop up when you&amp;#8217;re implementing NSManagedObject subclasses for your Core Data Entities.</description>
    </item>
    
    <item>
      <title>Using a Core Data Model in Swift Playgrounds</title>
      <link>https://www.andrewcbancroft.com/2016/07/10/using-a-core-data-model-in-swift-playgrounds/</link>
      <pubDate>Sun, 10 Jul 2016 20:48:54 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/07/10/using-a-core-data-model-in-swift-playgrounds/</guid>
      <description>Did you know that you can tinker with Core Data inside of Swift playgrounds in Xcode? You can!
Jeremiah Jessel, author at http://www.learncoredata.com, wrote up an article in 2015 detailing how you can use the Core Data framework inside a playground. He shows how you can do everything from setting up the Core Data stack, to creating NSManagedObjects programmatically in code. Great stuff!
After I read his guide, I got to thinking: I wonder if you can take an .</description>
    </item>
    
    <item>
      <title>Force Unwrapping Swift Optionals:  Code Smell!</title>
      <link>https://www.andrewcbancroft.com/2016/06/13/force-unwrapping-swift-optionals-code-smell/</link>
      <pubDate>Tue, 14 Jun 2016 03:54:57 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/06/13/force-unwrapping-swift-optionals-code-smell/</guid>
      <description>Do you find your Swift code riddled with !&amp;#8216;s?
I&amp;#8217;m becoming more and more uncomfortable with seeing ! throughout my Swift code. It&amp;#8217;s just a matter of time before it&amp;#8217;s going to bite me.
Often, I do it because it&amp;#8217;s the &amp;#8220;easy thing&amp;#8221; to do at the time. But it&amp;#8217;s dangerous.
Swift optionals are trying to help us. They force us to deal with the possibility of something not having a value.</description>
    </item>
    
    <item>
      <title>Is Protocol Oriented Swift Better than Object Oriented Swift?</title>
      <link>https://www.andrewcbancroft.com/2016/06/12/is-protocol-oriented-swift-better-than-object-oriented-swift/</link>
      <pubDate>Sun, 12 Jun 2016 20:59:48 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/06/12/is-protocol-oriented-swift-better-than-object-oriented-swift/</guid>
      <description>A question was asked on Reddit and showed up in my feed as I was browsing this weekend:
 What does protocol oriented programming mean, and why is it better than OOP?
 I really like a few things that were said in one of the top &amp;#8220;Explain Like I&amp;#8217;m 5&amp;#8221; comments that was posted in response to the question by CodaFi.
&amp;#8220;Explain Like I&amp;#8217;m Five&amp;#8221; &amp;#8211; A laundry service example First, the example provided was very understandable.</description>
    </item>
    
    <item>
      <title>Extracting a PKCS7 Container for Receipt Validation with Swift</title>
      <link>https://www.andrewcbancroft.com/2016/06/09/extracting-a-pkcs7-container-for-receipt-validation-with-swift/</link>
      <pubDate>Fri, 10 Jun 2016 03:44:58 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/06/09/extracting-a-pkcs7-container-for-receipt-validation-with-swift/</guid>
      <description>Updated on July 15, 2017 &amp;#8211; Swift 3 
So you&amp;#8217;ve prepared to test receipt validation by setting up your app in iTunes Connect.
You&amp;#8217;ve brought in a cryptography library like OpenSSL to be able to work with the PKCS #7 container that acts as the &amp;#8220;envelope&amp;#8221; for the receipt. Perhaps you&amp;#8217;ve even done it the &amp;#8220;easy way&amp;#8221; with CocoaPods.
You&amp;#8217;ve located and loaded the receipt for validation.
Now you&amp;#8217;re ready to extract the PKCS #7 container and work with it.</description>
    </item>
    
    <item>
      <title>Creating Calendar Events with Event Kit and Swift</title>
      <link>https://www.andrewcbancroft.com/2016/06/02/creating-calendar-events-with-event-kit-and-swift/</link>
      <pubDate>Thu, 02 Jun 2016 17:37:15 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/06/02/creating-calendar-events-with-event-kit-and-swift/</guid>
      <description>Folks have asked more about working with Event Kit and Swift, so the series continues with this guide on how to create calendar events with Event Kit and Swift!
Previous guides in the series include the following:
Previous Guides    Beginner’s Guide to Event Kit in Swift – Requesting Permission    Creating Calendars with Event Kit and Swift    Listing Calendar Events with Event Kit and Swift</description>
    </item>
    
    <item>
      <title>Swift Cheat Sheet for Dates, Formatters, &amp; Date Components</title>
      <link>https://www.andrewcbancroft.com/2016/05/26/swift-cheat-sheet-for-dates-formatters-date-components/</link>
      <pubDate>Thu, 26 May 2016 18:04:01 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/05/26/swift-cheat-sheet-for-dates-formatters-date-components/</guid>
      <description>Working with NSDate, NSDateFormatter, and NSDateComponents can be a little convoluted, so I&amp;#8217;ve created myself a cheat sheet that will be updated as I discover new tips and tricks in this realm.
The new cheat sheet can be found over at GitHub in the form of an Xcode Playground:
Resources    Swift Dates Cheat Sheet Playground   
Topics that are included in the Playground are as follows:</description>
    </item>
    
    <item>
      <title>Parse PFCloud – “JSON text did not start with array or object”</title>
      <link>https://www.andrewcbancroft.com/2016/05/19/parse-pfcloud-json-text-did-not-start-with-array-or-object/</link>
      <pubDate>Fri, 20 May 2016 03:33:03 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/05/19/parse-pfcloud-json-text-did-not-start-with-array-or-object/</guid>
      <description>It&amp;#8217;s always the little things that lead to flatter foreheads (or at least it is for me).
Banging my head against the desk this evening working on a Parse migration, I finally figured out what was causing an error condition in a PFCloud function call.
The request to the server succeeded, but the response was malformed somehow:
 Error Domain=NSCocoaErrorDomain Code=3840 &amp;#8220;JSON text did not start with array or object and option to allow fragments not set.</description>
    </item>
    
    <item>
      <title>Working with Swift:  Adopt a Protocol or Pass a Function?</title>
      <link>https://www.andrewcbancroft.com/2016/05/05/working-with-swift-adopt-a-protocol-or-pass-a-function/</link>
      <pubDate>Thu, 05 May 2016 17:59:16 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/05/05/working-with-swift-adopt-a-protocol-or-pass-a-function/</guid>
      <description>Without fail, any time Rob Napier (@cocoaphony) speaks or writes, I gain insight into new and deeper ways to solve problems with Swift.
In January 2016, he gave a talk at dotSwift, and I wanted to record my thoughts on something he said that made a lot of sense when it comes to the topic of, &amp;#8220;Should I create and adopt a protocol for this Type I&amp;#8217;m creating, or should I just pass it a function instead?</description>
    </item>
    
    <item>
      <title>Listing Calendar Events with Event Kit and Swift</title>
      <link>https://www.andrewcbancroft.com/2016/04/28/listing-calendar-events-with-event-kit-and-swift/</link>
      <pubDate>Thu, 28 Apr 2016 17:50:22 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/04/28/listing-calendar-events-with-event-kit-and-swift/</guid>
      <description>This is the continuation of a series of articles I&amp;#8217;ve writing for Swift developers working with Event Kit.
Supposing that after asking the user for permission to use their calendars, and even allowing users to create new calendars from within your iOS app, one possible next step could be to list out all of the events for a calendar that they tap on.
Jump to&amp;#8230;   Demo   Example project   Querying for events    Context: View controller   Configure start and end dates   Use the event store to generate NSPredicate   Query the event store with generated NSPredicate</description>
    </item>
    
    <item>
      <title>Adding Buttons to the Navigation Bar with Storyboards</title>
      <link>https://www.andrewcbancroft.com/2016/04/14/adding-buttons-to-the-navigation-bar-with-storyboards/</link>
      <pubDate>Thu, 14 Apr 2016 18:20:41 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/04/14/adding-buttons-to-the-navigation-bar-with-storyboards/</guid>
      <description>Updated on March 20, 2017 &amp;#8211; Xcode 8 &amp;amp; Swift 3
If you&amp;#8217;re having trouble figuring out how to add buttons to the navigation bar in your Storyboard-based iOS app, my goal in this article is to help you through the process. Knowing what to click and where to drag to get things wired up isn&amp;#8217;t entirely intuitive, so I want to be of help if I can.
Lots of StackOverflow posts point us to just adding the buttons in code, but for those who lean toward trying to do as much in the Storyboard designer as possible, this approach feels out of place.</description>
    </item>
    
    <item>
      <title>Swift Functions as Types</title>
      <link>https://www.andrewcbancroft.com/2016/03/18/swift-functions-as-types/</link>
      <pubDate>Fri, 18 Mar 2016 18:11:02 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/03/18/swift-functions-as-types/</guid>
      <description>For the well-versed functional programmer, the fact that functions in Swift are Types is no surprise. But I&amp;#8217;m relatively new to the game on that front, so when I first encountered the idea of thinking of a function as a Type back when Swift was announced in 2014, it was a real eye-opener for me.
Jump to&amp;#8230;   Swift Types (in general)    Named Types   Compound Types</description>
    </item>
    
    <item>
      <title>Fade Views In/Out with Fadeable – A Swift Protocol Extension</title>
      <link>https://www.andrewcbancroft.com/2016/02/22/fade-views-inout-with-fadeable-a-swift-protocol-extension/</link>
      <pubDate>Mon, 22 Feb 2016 19:07:27 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/02/22/fade-views-inout-with-fadeable-a-swift-protocol-extension/</guid>
      <description>During the production of my Pluralsight course on Managing Xcode Project Dependencies with CocoaPods, I wanted to provide viewers of the course the opportunity to see how to create and deploy a simple library out to the CocoaPods Trunk.
Jump to&amp;#8230;   Inspiration   Demo   Fadeable code sample   Creating CocoaPod libraries   You might also enjoy&amp;#8230;   Was this article helpful? Please share!</description>
    </item>
    
    <item>
      <title>Fundamentals of Callbacks for Swift Developers</title>
      <link>https://www.andrewcbancroft.com/2016/02/15/fundamentals-of-callbacks-for-swift-developers/</link>
      <pubDate>Mon, 15 Feb 2016 18:21:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/02/15/fundamentals-of-callbacks-for-swift-developers/</guid>
      <description>Updated on October 12, 2016 &amp;#8211; Swift 3.0
Callbacks: What are they? How do they work? What are they used for in practice?
My goal in this article is to provide answers to these questions so that you have a foundational understanding of this common programming pattern in iOS development.
Jump to&amp;#8230;   What are callbacks?    Learn by example: Designing an API for callbacks   &amp;#8220;Hook-in&amp;#8221; options</description>
    </item>
    
    <item>
      <title>Managing Xcode Project Dependencies with CocoaPods</title>
      <link>https://www.andrewcbancroft.com/2016/02/03/managing-xcode-project-dependencies-with-cocoapods/</link>
      <pubDate>Wed, 03 Feb 2016 18:23:49 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/02/03/managing-xcode-project-dependencies-with-cocoapods/</guid>
      <description>Announcing &amp;#8211; New Pluralsight Course! I&amp;#8217;m excited to announce the publication of my new course for Pluralsight titled &amp;#8220;Managing Xcode Project Dependencies with CocoaPods&amp;#8221;!
Not a Pluralsight subscriber? I would wholeheartedly recommend checking out their plans. They&amp;#8217;ve even got a free trial! Being a Pluralsight subscriber has literally been the single most impactful influence on my growth as a developer apart from at-the-keyboard experience.
Our team at work uses Pluralsight as a major portion of our developer training efforts, so there&amp;#8217;s an idea to pitch to your boss if you don&amp;#8217;t want to purchase an individual subscription!</description>
    </item>
    
    <item>
      <title>Swift Framework Woes – Unresolved Identifier? No Member?</title>
      <link>https://www.andrewcbancroft.com/2016/01/08/swift-framework-woes-unresolved-identifier-no-member/</link>
      <pubDate>Fri, 08 Jan 2016 18:40:55 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/01/08/swift-framework-woes-unresolved-identifier-no-member/</guid>
      <description>It&amp;#8217;s the simple things that get us, isn&amp;#8217;t it?
I was working on a simple little framework the other day, and I&amp;#8217;d gotten things just how I wanted&amp;#8230; or so I thought.
I was ready to test things out and import the framework into my real app.
import MyShinyNewFramework
Sweet! No build errors!
// attempt to use things defined in the framework
Not so sweet&amp;#8230;
 Use of unresolved identifier &amp;#8216;&amp;#8230;&amp;#8217;</description>
    </item>
    
    <item>
      <title>Working with Unwind Segues Programmatically in Swift</title>
      <link>https://www.andrewcbancroft.com/2015/12/18/working-with-unwind-segues-programmatically-in-swift/</link>
      <pubDate>Fri, 18 Dec 2015 18:22:55 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/12/18/working-with-unwind-segues-programmatically-in-swift/</guid>
      <description>Updated on September 20, 2016 &amp;#8211; Xcode 8 &amp;amp; Swift 3.0
Navigating between screens is a critical component to building iOS applications. The mechanism for navigation in Storyboard-based applications is the segue. Using segues, we can travel ahead to the next screen, which is extremely common. We can also travel backward in the screen &amp;#8220;navigation stack&amp;#8221; by programming a special kind of segue called an unwind segue.
Embedding a view controller inside a navigation controller gives us some built-in forward and backward navigation, so you may be asking, &amp;#8220;What&amp;#8217;s the need for an unwind segue?</description>
    </item>
    
    <item>
      <title>Get Social With Swift – Posting to Facebook and Twitter</title>
      <link>https://www.andrewcbancroft.com/2015/11/23/get-social-with-swift-posting-to-facebook-and-twitter/</link>
      <pubDate>Mon, 23 Nov 2015 19:17:38 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/11/23/get-social-with-swift-posting-to-facebook-and-twitter/</guid>
      <description>Building social media features into our apps has never been easier! In this guide, I will walk you through how to get started with accessing the Social framework for iOS so that you can take advantage of Apple&amp;#8217;s built-in support for two major social media platforms: Facebook, and Twitter.
For your convenience, I&amp;#8217;ve created a simple GitHub repository with an example Xcode project to help you see all of this code in action:</description>
    </item>
    
    <item>
      <title>Creating Trust-able Unit Tests in Swift</title>
      <link>https://www.andrewcbancroft.com/2015/11/03/creating-trust-able-unit-tests-in-swift/</link>
      <pubDate>Wed, 04 Nov 2015 02:42:08 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/11/03/creating-trust-able-unit-tests-in-swift/</guid>
      <description>It may come as a surprise to you, but a green-lit passing unit test is not always a sign that all is well with our software. Our apps and their corresponding unit test suites always start off clean and basic and simple.
But they don&amp;#8217;t stay that way for long.
Cycles of code changes and additions and re-writes take place throughout the days, weeks, and months of the application development cycle.</description>
    </item>
    
    <item>
      <title>Considerations for Choosing 3rd Party Swift Libraries</title>
      <link>https://www.andrewcbancroft.com/2015/10/27/considerations-for-choosing-3rd-party-swift-libraries/</link>
      <pubDate>Tue, 27 Oct 2015 18:04:09 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/10/27/considerations-for-choosing-3rd-party-swift-libraries/</guid>
      <description>While relying on 3rd party dependencies can provide you the benefit of not having to spend time implementing a portion of your app, realize that you’re essentially giving away little pieces of your app when you bring in a dependency.
You’re delegating away a certain level of control off to someone else who has no knowledge of or interest in the final outcome of your team’s app.
Adding dependencies to your project doesn’t come without cost, so it’s best to count that cost up front in order to make sure it’s a good idea to pursue this option.</description>
    </item>
    
    <item>
      <title>Loading a Receipt for Validation with Swift</title>
      <link>https://www.andrewcbancroft.com/2015/10/13/loading-a-receipt-for-validation-with-swift/</link>
      <pubDate>Wed, 14 Oct 2015 03:24:02 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/10/13/loading-a-receipt-for-validation-with-swift/</guid>
      <description>Updated on July 15, 2017 &amp;#8211; Swift 3 
I&amp;#8217;m working through a progression of entries on the process of validating receipts with OpenSSL for iOS in Swift.
Just want the code? Here you go!
Resources    Swifty Local Receipt Validator   
To-date, I&amp;#8217;ve explained how to get OpenSSL into your project (the easy way), and I&amp;#8217;ve walked through how to prepare to test receipt validation, including how to set everything up in the Apple Developer member center, and in iTunes Connect.</description>
    </item>
    
    <item>
      <title>Preparing to Test Receipt Validation for iOS</title>
      <link>https://www.andrewcbancroft.com/2015/10/05/preparing-to-test-receipt-validation-for-ios/</link>
      <pubDate>Mon, 05 Oct 2015 18:25:09 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/10/05/preparing-to-test-receipt-validation-for-ios/</guid>
      <description>Updated on July 15, 2017 &amp;#8211; Swift 3 
After having to piece together each step along the path of preparing to test receipt validation for iOS apps, I&amp;#8217;ve decided to combine everything into the following guide. Whether you&amp;#8217;re working to implement receipt validation for a new iOS app, or for an existing one, this walk-through should provide guidance to get you ready to work with receipts in your iOS application.</description>
    </item>
    
    <item>
      <title>OpenSSL for iOS &amp; Swift the Easy Way</title>
      <link>https://www.andrewcbancroft.com/2015/09/21/openssl-for-ios-swift-the-easy-way/</link>
      <pubDate>Tue, 22 Sep 2015 04:39:28 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/09/21/openssl-for-ios-swift-the-easy-way/</guid>
      <description>I&amp;#8217;m currently working on outfitting an app I&amp;#8217;m working on to be able to validate receipts to verify purchases of the app.
Little did I know, this adventure would introduce the need to understand how to use cryptography in order to work with the receipt.
Jump to&amp;#8230;   Cryptography library needed   OpenSSL for iOS with Cocoapods   Bridging header   Xcode 7 &amp;amp; Bitcode   You might also enjoy&amp;#8230;   Was this article helpful?</description>
    </item>
    
    <item>
      <title>Testability Tip for Swift Developers – Parameterize and Push</title>
      <link>https://www.andrewcbancroft.com/2015/09/04/testability-tip-for-swift-developers-parameterize-and-push/</link>
      <pubDate>Fri, 04 Sep 2015 18:36:52 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/09/04/testability-tip-for-swift-developers-parameterize-and-push/</guid>
      <description>In a previous &amp;#8220;Testability Tip for Swift Developers&amp;#8221;, I discussed the principle of observability. &amp;#8220;If it&amp;#8217;s observable, it&amp;#8217;s testable&amp;#8221; was the primary conclusion of the article, and I pointed toward using the public access control modifier for parts of your app that you intend to test.
In this edition, I&amp;#8217;d like to introduce a new principle that I try to adhere to when I&amp;#8217;m unit testing, namely, &amp;#8220;If it&amp;#8217;s controllable, it&amp;#8217;s testable&amp;#8221;.</description>
    </item>
    
    <item>
      <title>Sharing a Core Data Model with a Swift Framework</title>
      <link>https://www.andrewcbancroft.com/2015/08/25/sharing-a-core-data-model-with-a-swift-framework/</link>
      <pubDate>Wed, 26 Aug 2015 04:04:05 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/08/25/sharing-a-core-data-model-with-a-swift-framework/</guid>
      <description>Updated on June 13, 2017 &amp;#8211; Swift 3.0, Xcode 8
Code re-use is a powerful thing, but it&amp;#8217;s not always easy to pull off. We strive for it though, because in the long run, it makes maintaining the code far, far easier than if we just settled for copying and pasting.
With the introduction of dynamic frameworks in iOS 8, a world of possibility opened up for iOS developers to achieve some pretty cool re-use scenarios, one of which we&amp;#8217;re going to dive into today.</description>
    </item>
    
    <item>
      <title>Analyzing Swift Protocol Extensions and C# Abstract Classes</title>
      <link>https://www.andrewcbancroft.com/2015/08/06/analyzing-swift-protocol-extensions-and-c-abstract-classes/</link>
      <pubDate>Fri, 07 Aug 2015 03:52:25 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/08/06/analyzing-swift-protocol-extensions-and-c-abstract-classes/</guid>
      <description>Being a C# developer by day and a Swift developer by night has me constantly thinking about the similarities and differences between these two languages. I genuinely enjoy programming with each, and I love it when I can take a strategy that works well in one language, and see where that might cross over to the other. One of the areas I&amp;#8217;ve been pondering as of late is the idea of how Swift and C# compare in terms of protocol extensions and abstract classes.</description>
    </item>
    
    <item>
      <title>Setting Up Carthage for the Terminal-Timid</title>
      <link>https://www.andrewcbancroft.com/2015/07/29/setting-up-carthage-for-the-terminal-timid/</link>
      <pubDate>Thu, 30 Jul 2015 04:05:05 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/07/29/setting-up-carthage-for-the-terminal-timid/</guid>
      <description>The old adage &amp;#8220;Don&amp;#8217;t go reinventing the wheel&amp;#8221; comes into play often when developing software, doesn&amp;#8217;t it? Why build this [thing] ourselves when someone else has invented it already?
Fantastic libraries and frameworks exist out there to assist developers with common and sometimes even difficult problems. Whether it be an easier-to-use abstraction over the networking stack with AFNetworking or AlamoFire, or adding a popular behavior-driven development testing framework like Quick to our workflow, we find ourselves constantly wanting to be able to take advantage of the things that others are doing in the community so we don&amp;#8217;t have to invent that wheel again ourselves.</description>
    </item>
    
    <item>
      <title>Dissecting 10 Read 10 Said – My New Swift iOS App</title>
      <link>https://www.andrewcbancroft.com/2015/07/22/dissecting-10-read-10-said-my-new-swift-ios-app/</link>
      <pubDate>Thu, 23 Jul 2015 03:57:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/07/22/dissecting-10-read-10-said-my-new-swift-ios-app/</guid>
      <description>I&amp;#8217;m very excited to announce that my new app, 10 Read 10 Said, is now available for iOS and Android!
While the goal of the app is to help you implement the &amp;#8220;10 Read 10 Said&amp;#8221; strategy for memorizing Bible verses, my goal in this article is to dissect the app, and share with you how some of the major features were implemented.
As it turns out, most of the major features of the app are things that I&amp;#8217;ve already written about over the past year of producing Swift content!</description>
    </item>
    
    <item>
      <title>UITableView Swipe to Delete Workflow in Swift</title>
      <link>https://www.andrewcbancroft.com/2015/07/16/uitableview-swipe-to-delete-workflow-in-swift/</link>
      <pubDate>Fri, 17 Jul 2015 04:00:18 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/07/16/uitableview-swipe-to-delete-workflow-in-swift/</guid>
      <description>Data management applications, by which I mean an app where you&amp;#8217;re allowing users to add, edit, and delete bits of data as part of your app&amp;#8217;s core function, very likely use a table view (or two) to visualize lists of information that users of the app can interact with.
Making changes to the information listed in the table view and signaling those changes in a fluent way becomes a top concern for these types of apps.</description>
    </item>
    
    <item>
      <title>Circular Progress Indicator in Swift</title>
      <link>https://www.andrewcbancroft.com/2015/07/09/circular-progress-indicator-in-swift/</link>
      <pubDate>Fri, 10 Jul 2015 04:31:49 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/07/09/circular-progress-indicator-in-swift/</guid>
      <description>Updated on April 17, 2017 &amp;#8211; Swift 3
Circular progress indicators are a nice and compact way to visualize progress information for users of your iOS app. I was extremely grateful to come across Kaan Dedeoglu&amp;#8217;s KDCircularProgress project on GitHub. It&amp;#8217;s a versatile little UI component written in Swift that provides a great amount of flexibility and customization options. I love it!
As a bonus to this amazing component, recent contributions by Kaan have opened up the ability for us to lay out and set up the circular progress indicator in the Storyboard!</description>
    </item>
    
    <item>
      <title>Every Swift Value Type Should Be Equatable</title>
      <link>https://www.andrewcbancroft.com/2015/07/01/every-swift-value-type-should-be-equatable/</link>
      <pubDate>Wed, 01 Jul 2015 18:07:35 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/07/01/every-swift-value-type-should-be-equatable/</guid>
      <description>As I listened to the WWDC15 talk on Building Better Apps with Value Types in Swift I was struck by a sentence that I had never dawned on me before:
 Every Value Type should be Equatable.
 That is, every Value Type should conform to the Equatable protocol.
Talk about a sweeping statement! Wow &amp;#8211; every Value Type should be Equatable? Hmm&amp;#8230; Let&amp;#8217;s unpack the &amp;#8220;why&amp;#8217;s&amp;#8221; and &amp;#8220;how&amp;#8217;s&amp;#8221; of this statement.</description>
    </item>
    
    <item>
      <title>Swift UIColor Extension – Create using RGB Values (Not %)</title>
      <link>https://www.andrewcbancroft.com/2015/06/25/swift-uicolor-extension-create-using-rgb-values-not/</link>
      <pubDate>Fri, 26 Jun 2015 03:11:48 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/06/25/swift-uicolor-extension-create-using-rgb-values-not/</guid>
      <description>I&amp;#8217;ll say it up front &amp;#8211; I&amp;#8217;m not a great designer. What tends to happen with me and projects is that I end up saving all-things color until the end of a project. You know&amp;#8230; the old procrastinator&amp;#8217;s motto: &amp;#8220;If you don&amp;#8217;t get it done today and tomorrow doesn&amp;#8217;t come, then you ain&amp;#8217;t gotta do it!&amp;#8221;
So the other day came and I had to &amp;#8220;do color&amp;#8221;&amp;#8230;
Thankfully, a buddy of mine has good skills in the area, and gave me a color palette to use.</description>
    </item>
    
    <item>
      <title>Creating Calendars with Event Kit and Swift</title>
      <link>https://www.andrewcbancroft.com/2015/06/17/creating-calendars-with-event-kit-and-swift/</link>
      <pubDate>Wed, 17 Jun 2015 17:46:29 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/06/17/creating-calendars-with-event-kit-and-swift/</guid>
      <description>Updated on April 19, 2016 – Swift 2.1 | Added example project
Apple’s Event Kit framework empowers developers to interact with an iOS device’s calendar database. Not only can we read calendars and events from the database, we can also create calendars.
In a previous article, we looked at how to handle asking the user for permission to access their calendars. Now my goal is to show you how to create local calendars on the user&amp;#8217;s device programmatically with Swift using the Event Kit framework.</description>
    </item>
    
    <item>
      <title>Improvements to Unit Testing in Swift with Xcode 7</title>
      <link>https://www.andrewcbancroft.com/2015/06/10/improvements-to-unit-testing-in-swift-with-xcode-7/</link>
      <pubDate>Wed, 10 Jun 2015 17:43:09 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/06/10/improvements-to-unit-testing-in-swift-with-xcode-7/</guid>
      <description>One of the most exciting things that&amp;#8217;s come out of WWDC 2015 is the fact that unit testing in Swift has been greatly simplified. The latest announcements have actually rendered a few of my articles on the subject obsolete, once Xcode 7 is in full circulation among the Swift developer community.
If you&amp;#8217;re using Xcode 6.x, you may still find use in a couple of my previous articles:
 Swift Access Control – Implications for Unit Testing Testability Tip for Swift Developers – Public Over Private  If you&amp;#8217;re jumping headlong into Xcode 7 world, setting yourself up for unit testing is incredibly simple.</description>
    </item>
    
    <item>
      <title>Access Sub-Controllers from a UINavigationController in Swift</title>
      <link>https://www.andrewcbancroft.com/2015/06/02/access-sub-controllers-from-a-uinavigationcontroller-in-swift/</link>
      <pubDate>Tue, 02 Jun 2015 17:37:44 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/06/02/access-sub-controllers-from-a-uinavigationcontroller-in-swift/</guid>
      <description>The sequence of accessing a UINavigationController&#39;s first child from within the AppDelegate or within prepareForSegue(_:sender:) always gets me. Here are a few quick snippets to help you and I quickly get up and running when working with navigation controllers in our Swift applications:
Jump to&amp;#8230;   AppDelegate    Digging for the first view controller  
&amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;#prepare-for-segue&amp;quot;&amp;gt;Prepare for segue&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;#share&amp;quot;&amp;gt;Was this article helpful?</description>
    </item>
    
    <item>
      <title>Sync Table View Data: NSFetchedResultsController and Swift</title>
      <link>https://www.andrewcbancroft.com/2015/05/28/sync-table-view-data-nsfetchedresultscontroller-swift/</link>
      <pubDate>Fri, 29 May 2015 03:20:54 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/05/28/sync-table-view-data-nsfetchedresultscontroller-swift/</guid>
      <description>Updated on September 23, 2015 &amp;#8211; Swift 2.0
My goal with this article is to help you utilize the full power of NSFetchedResultsController.
This is a continuation on a series of articles I&amp;#8217;ve written on Core Data and NSFetchedResultsController, so you may want to check out those previous posts to get an idea of where I&amp;#8217;m picking up in this walk-through. Previously I touched on how to seed a Core Data database, and how to take that data and display it in a table view with an NSFetchedResultsController.</description>
    </item>
    
    <item>
      <title>Swift How-To:  Setting up a Table View</title>
      <link>https://www.andrewcbancroft.com/2015/05/18/swift-how-to-setting-up-a-table-view/</link>
      <pubDate>Tue, 19 May 2015 02:31:38 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/05/18/swift-how-to-setting-up-a-table-view/</guid>
      <description>Think of this screencast as the &amp;#8220;Hello World&amp;#8221; of creating a view controller with a table view. I cover organizing things in the Storyboard, Auto Layout constraints, and the implementation of the data source protocol methods for a table view.
Screencast Screencast Transcript [0:01] Hi, I&amp;#8217;m Andrew from andrewcbancroft.com.
I use table views fairly often in my examples, so I&amp;#8217;ve decided to create a short walkthrough of how to set up a table view in Swift.</description>
    </item>
    
    <item>
      <title>Beginner’s Guide to Event Kit in Swift – Requesting Permission</title>
      <link>https://www.andrewcbancroft.com/2015/05/14/beginners-guide-to-eventkit-in-swift-requesting-permission/</link>
      <pubDate>Thu, 14 May 2015 20:37:52 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/05/14/beginners-guide-to-eventkit-in-swift-requesting-permission/</guid>
      <description>Updated on October 26, 2016 – Swift 3.0
EventKit provides a set of classes for accessing and manipulating a user&amp;#8217;s calendar events and reminders. In the tutorial that follows, my goal is to walk you through the first steps of setting up an app that utilizes EventKit. I will demonstrate how to request permission to the user&amp;#8217;s calendar and show a couple of examples for how to handle the user&amp;#8217;s response (for when they grant access, or deny it).</description>
    </item>
    
    <item>
      <title>Strong, Weak, and Unowned – Sorting out ARC and Swift</title>
      <link>https://www.andrewcbancroft.com/2015/05/08/strong-weak-and-unowned-sorting-out-arc-and-swift/</link>
      <pubDate>Fri, 08 May 2015 18:01:09 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/05/08/strong-weak-and-unowned-sorting-out-arc-and-swift/</guid>
      <description>I&amp;#8217;m willing to bet that a good number of Swift developers struggle with the particulars of how strong, weak, and unowned affect the run-time behavior of their code. I, myself, wouldn&amp;#8217;t want to have to give an explanation of the finer points of Automatic Reference Counting (ARC) if my life depended on it.
I wanted to stop being unsure about the implications of typing one of those three words before variable / constant declarations, so I finally pulled up the Apple Documentation on ARC and began trying to digest the semantics.</description>
    </item>
    
    <item>
      <title>Testing is to Software as Experiment is to Science</title>
      <link>https://www.andrewcbancroft.com/2015/04/29/testing-is-to-software-as-experiment-is-to-science/</link>
      <pubDate>Thu, 30 Apr 2015 04:01:24 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/04/29/testing-is-to-software-as-experiment-is-to-science/</guid>
      <description>The principle of science, the definition, almost, is the following: The test of all knowledge is experiment.
The sole test of the validity of any idea is experiment.
 These quote came from Chapter 1 and Chapter 2 of the Feynman Lectures on Physics.
I&amp;#8217;m not a physicist, but the software developer in me resonated with the connection between experimentation and validation of what we know about the world around us.</description>
    </item>
    
    <item>
      <title>Clarifying Swift Access Control (Hint:  Swift Isn’t C#)</title>
      <link>https://www.andrewcbancroft.com/2015/04/24/clarifying-swift-access-control-hint-swift-isnt-c-sharp/</link>
      <pubDate>Fri, 24 Apr 2015 18:02:34 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/04/24/clarifying-swift-access-control-hint-swift-isnt-c-sharp/</guid>
      <description>As it turns out, Swift isn&amp;#8217;t C# (or Java or VB.Net or&amp;#8230;)! My day job keeps me busy writing C#, so I&amp;#8217;ll reference it as my go-to comparison language for this article. The conclusion, however, carries over to other languages that have access control modifiers.
I just spent the greater part of a week experimenting with Swift extensions. I was trying to figure out some seemingly strange behavior that they were exhibiting.</description>
    </item>
    
    <item>
      <title>3 Nuances of Swift Extensions</title>
      <link>https://www.andrewcbancroft.com/2015/04/22/3-nuances-of-swift-extensions/</link>
      <pubDate>Wed, 22 Apr 2015 17:52:36 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/04/22/3-nuances-of-swift-extensions/</guid>
      <description>How often do we take an initial cursory look at some documentation, shake our heads and say, &amp;#8220;Ok, sure! Got it!&amp;#8221;, and then some time later get to the actual usage of that perceived understanding only to find out, &amp;#8220;Woah &amp;#8211; this is behaving differently than I expected! I wonder if the documentation says anything about this?!&amp;#8221;
A few discussions I&amp;#8217;ve had recently have prompted me to question what I thought I knew about Swift extensions.</description>
    </item>
    
    <item>
      <title>Testability Tip for Swift Developers – Public Over Private</title>
      <link>https://www.andrewcbancroft.com/2015/04/15/testability-tip-for-swift-developers-public-over-private/</link>
      <pubDate>Wed, 15 Apr 2015 18:52:11 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/04/15/testability-tip-for-swift-developers-public-over-private/</guid>
      <description>Quite often in unit testing, especially when practicing Test-Driven Development, I find myself wanting to test every single line of code. When I run up against a private function, however, I often scratch my head and ask, &amp;#8220;How am I supposed to test this??&amp;#8221;.
Most experienced testers will tell you, &amp;#8220;Don&amp;#8217;t test private implementation &amp;#8211; only public API&amp;#8221;.
&amp;#8220;Okay&amp;#8230; But how, does that private function get tested?&amp;#8221;, I always asked.</description>
    </item>
    
    <item>
      <title>How Delegation Works – A Swift Developer’s Guide</title>
      <link>https://www.andrewcbancroft.com/2015/04/08/how-delegation-works-a-swift-developer-guide/</link>
      <pubDate>Thu, 09 Apr 2015 01:43:55 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/04/08/how-delegation-works-a-swift-developer-guide/</guid>
      <description>Updated on October 11, 2016 &amp;#8211; Swift 3.0
Delegation can be a difficult topic to wrap your head around. I found it easiest to break up posts on the topic to help readers who are new to the pattern grasp the concepts a little better. First, I analyzed what delegation is in &amp;#8220;What is Delegation &amp;#8211; A Swift Developer&amp;#8217;s Guide&amp;#8221;. If you&amp;#8217;re looking for the &amp;#8220;what is it?&amp;#8221; behind the &amp;#8220;how does it work?</description>
    </item>
    
    <item>
      <title>Enums Instead of Booleans – An Example Implementation</title>
      <link>https://www.andrewcbancroft.com/2015/04/01/enums-instead-of-booleans-an-example-implementation/</link>
      <pubDate>Wed, 01 Apr 2015 12:00:52 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/04/01/enums-instead-of-booleans-an-example-implementation/</guid>
      <description>This blog entry was inspired by Objc.io&amp;#8217;s snippet titled &amp;#8220;Enums instead of Booleans&amp;#8221;. I really loved the clarity that using enumerations brought to even the simplest of examples that was presented in that snippet. If you haven&amp;#8217;t seen it, check it out before continuing on!
Objc.io&amp;#8217;s snippet focused primarily on the definition and consumption of the enumeration values. What I&amp;#8217;d like to focus on here is the implementation of the thing that produces those values for the switch-case that will consume them later on.</description>
    </item>
    
    <item>
      <title>Announcing the Birth of……</title>
      <link>https://www.andrewcbancroft.com/2015/03/27/announcing-the-birth-of/</link>
      <pubDate>Fri, 27 Mar 2015 13:00:27 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/03/27/announcing-the-birth-of/</guid>
      <description>My daughter, whom we codenamed Firefly, made her debut at 2:59 AM this morning! Being the nerd that I am, I built a small iOS app to reveal her name.
Introducing&amp;#8230;.</description>
    </item>
    
    <item>
      <title>What is Delegation? – A Swift Developer’s Guide</title>
      <link>https://www.andrewcbancroft.com/2015/03/26/what-is-delegation-a-swift-developers-guide/</link>
      <pubDate>Fri, 27 Mar 2015 03:29:01 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/03/26/what-is-delegation-a-swift-developers-guide/</guid>
      <description>Of the major design patterns that are prevalent in iOS development, delegation is one that appears quite often. For many developers entering app development for the iOS platform, dealing with delegates is a new concept. It certainly was for me.
In my analysis of NSNotificationCenter vs Delegation, I wrote some about delegation, but only in comparison to how NSNotificationCenter works. I haven&amp;#8217;t yet given delegation dedicated time and analysis, but I intend to do so now.</description>
    </item>
    
    <item>
      <title>Basics of Pull to Refresh for Swift Developers</title>
      <link>https://www.andrewcbancroft.com/2015/03/17/basics-of-pull-to-refresh-for-swift-developers/</link>
      <pubDate>Tue, 17 Mar 2015 17:55:52 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/03/17/basics-of-pull-to-refresh-for-swift-developers/</guid>
      <description>Updated on September 21, 2016 &amp;#8211; Swift 3.0
Implementing &amp;#8220;pull to refresh&amp;#8221; is a common need that arises when working with table views. There are typically two scenarios that folks find themselves in when attempting to implement this feature:
 They&amp;#8217;re working with a UITableViewController They&amp;#8217;re working with a non-UITableViewController, but their view incorporates a regular UITableView, either taking up the whole screen, or a smaller portion of it  This entry will explore both scenarios to help you get up and running quickly with implementing pull to refresh for your Swift iOS app.</description>
    </item>
    
    <item>
      <title>An (Almost) TDD Workflow in Swift</title>
      <link>https://www.andrewcbancroft.com/2015/03/10/an-almost-tdd-workflow-in-swift/</link>
      <pubDate>Wed, 11 Mar 2015 01:46:59 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/03/10/an-almost-tdd-workflow-in-swift/</guid>
      <description>There are times when it feels paralyzing to write tests first before any production code is written. Even with good requirements documentation, I often find myself asking, &amp;#8220;How am I supposed to write a test to verify x about some thing that doesn&amp;#8217;t exist in actual code yet?&amp;#8221; It can be crippling.
The following is a workflow that&amp;#8217;s helped me grow in my test-first development skills. When I find myself staring at the screen, paralyzed because I&amp;#8217;m &amp;#8220;not supposed to write actual production code until the test is written&amp;#8221;, I often turn to the workflow that I&amp;#8217;m about to describe to help me break through to being productive.</description>
    </item>
    
    <item>
      <title>Displaying Data With NSFetchedResultsController and Swift</title>
      <link>https://www.andrewcbancroft.com/2015/03/05/displaying-data-with-nsfetchedresultscontroller-and-swift/</link>
      <pubDate>Thu, 05 Mar 2015 15:14:53 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/03/05/displaying-data-with-nsfetchedresultscontroller-and-swift/</guid>
      <description>Updated on September 23, 2015 &amp;#8211; Swift 2.0
The combination of an NSFetchedResultsController and a UITableView provides a powerful way to integrate Core Data with a user interface. The greatest benefits of using NSFetchedResultsController come when we use it to automatically update a table view when objects are added, updated, or removed from a Core Data data store. First things first, though&amp;#8230;
With a Core Data data store seeded with data, the next logical step is to display that data somewhere other than the console.</description>
    </item>
    
    <item>
      <title>Using Swift to Seed a Core Data Database</title>
      <link>https://www.andrewcbancroft.com/2015/02/25/using-swift-to-seed-a-core-data-database/</link>
      <pubDate>Thu, 26 Feb 2015 03:44:53 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/02/25/using-swift-to-seed-a-core-data-database/</guid>
      <description>Updated on September 23, 2015 &amp;#8211; Swift 2.0
Designing an application&amp;#8217;s UI can be difficult without actual data to present. Early on in the design process, data sourced from something like an array can suffice. Later on, however, our data sources become more dependent on actual data stores, such as what Core Data provides us.
During development, I&amp;#8217;ve found that it&amp;#8217;s often convenient to seed a Core Data database with sample data so that I can preview how it&amp;#8217;ll look in my application.</description>
    </item>
    
    <item>
      <title>Core Data Cheat Sheet for Swift iOS Developers</title>
      <link>https://www.andrewcbancroft.com/2015/02/18/core-data-cheat-sheet-for-swift-ios-developers/</link>
      <pubDate>Wed, 18 Feb 2015 18:20:59 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/02/18/core-data-cheat-sheet-for-swift-ios-developers/</guid>
      <description>Updated on July 27, 2016 &amp;#8211; Additional Cheats
Having trouble recalling how to perform basic Core Data operations? This cheat sheet is a handy reference to keep you productive with Core Data and Swift!
The code snippets below are here to help jog your memory when it&amp;#8217;s been a while since you&amp;#8217;ve worked in Core Data. They could also be helpful for newcomers to iOS development, Core Data, and Swift.</description>
    </item>
    
    <item>
      <title>Custom UITableViewCell for Text Input in Swift</title>
      <link>https://www.andrewcbancroft.com/2015/02/12/custom-uitableviewcell-text-input-swift/</link>
      <pubDate>Thu, 12 Feb 2015 13:00:50 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/02/12/custom-uitableviewcell-text-input-swift/</guid>
      <description>The need to collect data via text input is a common in many applications. This walk-through showcases how to create a custom UITableViewCell for accepting text input within a UITableView.
Outline   Table Views for Data Entry?   Step by Step Walkthrough    Set up Storyboard with table view   Set up table view prototype cell with text field   Create new TextInputTableViewCell class   Change cell class in Storyboard to TextInputTableViewCell   Set reuse identifier   Implement table view data source and delegate methods   Run in simulator</description>
    </item>
    
    <item>
      <title>NSNotificationCenter vs Delegation – An Analysis</title>
      <link>https://www.andrewcbancroft.com/2015/02/05/nsnotificationcenter-vs-delegation-analysis/</link>
      <pubDate>Thu, 05 Feb 2015 13:00:26 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/02/05/nsnotificationcenter-vs-delegation-analysis/</guid>
      <description>In Fundamentals of NSNotificationCenter in Swift, a commenter asked me to elaborate on a response I&amp;#8217;d given to a dialog going on below the blog post. I had stated:
 If you need a more structured environment around your [instance]-to-[instance] communication, delegates &amp;#8230; are probably a better choice [than NSNotificationCenter].
 I&amp;#8217;ve been thinking for some time since I responded with that comment. What do I mean when I say &amp;#8220;if you need a more structured environment&amp;#8221;&amp;#8230; What does that even look like?</description>
    </item>
    
    <item>
      <title>Converting Complex Objective-C Macros to Swift Functions</title>
      <link>https://www.andrewcbancroft.com/2015/01/29/converting-complex-objective-c-macros-swift-functions/</link>
      <pubDate>Thu, 29 Jan 2015 13:00:51 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/01/29/converting-complex-objective-c-macros-swift-functions/</guid>
      <description>The question of how to convert #define macros from Objective-C to Swift is explained fairly simply in the Apple developer documentation on the subject. For simple macros, it&amp;#8217;s a matter of rewriting them as global constants. In fact, if you&amp;#8217;re using the hybrid Objective-C &amp;#8212; Swift approach to writing your app, Swift sees those simple macros and automatically makes them available to your Swift code. I also gave some tips on the alternative to Objective-C macros a while back.</description>
    </item>
    
    <item>
      <title>Conveniently Transforming Immutable Types in Swift</title>
      <link>https://www.andrewcbancroft.com/2015/01/20/conveniently-transforming-immutable-types-swift/</link>
      <pubDate>Tue, 20 Jan 2015 12:30:51 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/01/20/conveniently-transforming-immutable-types-swift/</guid>
      <description>A few weeks ago I wrote about Immutable Types and Changing State in Swift, where I hoped to convey an &amp;#8220;aha!-moment&amp;#8221; that happened for me.
Since then, I&amp;#8217;ve learned a bit more. For example, the technique I presented for transforming instances of a Type immutably actually come for free when you use a value Type, such as a Struct! Check out @NatashaTheRobot&amp;#8217;s writeup on the subject, titled &amp;#8220;Mutating Functions in Swift Structs&amp;#8221;, for more information.</description>
    </item>
    
    <item>
      <title>Unit Testing Model Layer with Core Data and Swift</title>
      <link>https://www.andrewcbancroft.com/2015/01/13/unit-testing-model-layer-core-data-swift/</link>
      <pubDate>Tue, 13 Jan 2015 13:00:37 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/01/13/unit-testing-model-layer-core-data-swift/</guid>
      <description>Updated on November 19, 2015 &amp;#8211; Swift 2.0
As I approached testing my Core Data model, I have to admit I was apprehensive. How in the world was I going to write unit tests for my model layer that depended on a database. Past experience with trying to write tests with databases was painful. I feared the same would be the case with Core Data.
To my surprise, unit testing my Core Data model layer has been… well… amazing.</description>
    </item>
    
    <item>
      <title>Immutable Types with Changing State in Swift</title>
      <link>https://www.andrewcbancroft.com/2015/01/06/immutable-types-changing-state-swift/</link>
      <pubDate>Tue, 06 Jan 2015 12:00:50 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/01/06/immutable-types-changing-state-swift/</guid>
      <description>Dabble in Swift for long and the functional programming paradigm will most certainly appear on your radar. From conferences to books to blog posts, I&amp;#8217;ve seen a lot in the functional programming arena as it relates to Swift.
As I seek to improve my functional programming thought processes and to practice what I&amp;#8217;m learning, I found myself struggling with a fundamental concept: immutability. Especially when I&amp;#8217;m designing something that, at the very least, appears to require the ability to change state at some point in time.</description>
    </item>
    
    <item>
      <title>Getting Started with Unit Testing in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/12/29/getting-started-unit-testing-swift/</link>
      <pubDate>Mon, 29 Dec 2014 12:00:50 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/12/29/getting-started-unit-testing-swift/</guid>
      <description>Getting set up to write unit tests in Swift, while not difficult, isn&amp;#8217;t exactly intuitive. I&amp;#8217;ve written several posts and gathered a few resources on unit testing in Swift, but I haven&amp;#8217;t yet published a &amp;#8220;getting started&amp;#8221; guide until now.
Where does one get started with unit testing in Swift when they&amp;#8217;ve never gotten started before? Here are 5 steps to help you successfully begin unit testing in Swift:</description>
    </item>
    
    <item>
      <title>Swift Unit Testing – Verifying Method Calls</title>
      <link>https://www.andrewcbancroft.com/2014/12/22/swift-unit-testing-verifying-method-calls/</link>
      <pubDate>Mon, 22 Dec 2014 13:09:28 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/12/22/swift-unit-testing-verifying-method-calls/</guid>
      <description>In this unit testing screencast for Swift developers, we explore how to use Test Driven Development to verify method calls.
Getting Started Guide If you&amp;#8217;re new to unit testing or are trying to get set up with unit testing in a Swift project, you might check out my getting started guide before jumping into the screencast.
Screencast Large / Full-Screen Viewing
GitHub Example GitHub repo of the example developed in the screencast.</description>
    </item>
    
    <item>
      <title>Swift Unit Testing Resources</title>
      <link>https://www.andrewcbancroft.com/2014/12/19/swift-unit-testing-resources/</link>
      <pubDate>Fri, 19 Dec 2014 12:00:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/12/19/swift-unit-testing-resources/</guid>
      <description>As I&amp;#8217;ve researched Test Driven Development practices in general, and for iOS / Mac applications, I&amp;#8217;ve been helped by several sources. I&amp;#8217;ve also discovered a few things the hard way, so I&amp;#8217;m combining and maintaining this list of resources to help point you in some helpful directions as you adventure in unit testing your iOS apps.
Jump to&amp;#8230;   Pluralsight courses   Blogs   User group talks   At andrewcbancroft.</description>
    </item>
    
    <item>
      <title>TDD for iOS in Swift – What’s the Goal?</title>
      <link>https://www.andrewcbancroft.com/2014/12/16/tdd-ios-swift-whats-goal/</link>
      <pubDate>Tue, 16 Dec 2014 12:00:10 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/12/16/tdd-ios-swift-whats-goal/</guid>
      <description>Before actually doing Test Driven Development (TDD) for your iOS / Mac app, it&amp;#8217;s really important to ask a very fundamental question: What&amp;#8217;s the goal? What am I aiming for when I say I want to drive my iOS development with tests?
2 Goals of TDD in iOS A recent course I watched on Pluralsight called TDD as a Design Tool gave me some insight on two goals for doing Test Driven Development:</description>
    </item>
    
    <item>
      <title>Don’t Write Legacy Swift</title>
      <link>https://www.andrewcbancroft.com/2014/12/10/dont-write-legacy-swift/</link>
      <pubDate>Wed, 10 Dec 2014 12:00:51 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/12/10/dont-write-legacy-swift/</guid>
      <description>“Legacy Swift”.&amp;nbsp; Is that an odd phrase to you, too?
“Legacy” has connotations such as “old”, “difficult-to-change”, “outdated”, etc. Juxtaposing “legacy” and “Swift” would never have crossed my mind until I read Michael Feathers’, Working Effectively With Legacy Code, where he asserts,
 Legacy code is simply code without tests.
 What an impact those words had on me as I’ve transitioned over to Swift from Objective-C.&amp;nbsp; If it’s true that legacy code is code without tests, it’s easy to see how you and I could be writing legacy Swift, even though Swift is a brand new language!</description>
    </item>
    
    <item>
      <title>Send a Type to Obedience School – Using Swift Extensions for Additional Protocol Conformance</title>
      <link>https://www.andrewcbancroft.com/2014/12/02/send-a-type-to-obedience-school-using-swift-extensions-for-additional-protocol-conformance/</link>
      <pubDate>Tue, 02 Dec 2014 19:15:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/12/02/send-a-type-to-obedience-school-using-swift-extensions-for-additional-protocol-conformance/</guid>
      <description>Did you know that you can make any Type (here meaning Class, Enumeration, or Struct), even already-existing ones that you don&amp;#8217;t have the source code for, adopt a protocol that it doesn&amp;#8217;t normally conform to out of the box?
You can &amp;#8211; even if you don&amp;#8217;t have the original source code for that Type! It&amp;#8217;s a powerful and intriguing proposition. Let&amp;#8217;s explore how this is possible.
How, you ask? Well, as the title of this article suggests, Swift extensions are the way to do it.</description>
    </item>
    
    <item>
      <title>Swift UITableViewDataSource Cheat Sheet</title>
      <link>https://www.andrewcbancroft.com/2014/11/24/swift-uitableviewdatasource-cheat-sheet/</link>
      <pubDate>Mon, 24 Nov 2014 22:04:28 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/11/24/swift-uitableviewdatasource-cheat-sheet/</guid>
      <description>iOS developers will quickly recognize that there are a set of methods that always tend to get implemented when dealing with UITableViews . The problem I consistently face is remembering that set of methods that belong to the UITableViewDataSource (and UITableViewDelegate ) protocols. I find myself option-clicking the protocol name to remember the method signatures I need, since XCode doesn&amp;#8217;t have a way to stub out the methods involved with a protocol (C# developers working in Visual Studio like myself are spoiled!</description>
    </item>
    
    <item>
      <title>Distinguishing Between Multiple UIActionSheets with Swift</title>
      <link>https://www.andrewcbancroft.com/2014/11/16/distinguishing-between-multiple-uiactionsheets-with-swift/</link>
      <pubDate>Mon, 17 Nov 2014 04:17:39 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/11/16/distinguishing-between-multiple-uiactionsheets-with-swift/</guid>
      <description>The challenge when dealing with the presentation and handling of more than one UIActionSheet in a single View Controller is made clear by asking, &amp;#8220;How am I going to tell which action sheet I&amp;#8217;m dealing with so that I can handle the user&amp;#8217;s choice appropriately?&amp;#8221;
Presumably, the user&amp;#8217;s interaction with one of the action sheets will be different than the other(s), so you&amp;#8217;ll need to think through how to distinguish between them, in order to respond to that interaction appropriately.</description>
    </item>
    
    <item>
      <title>The 5 W’s of Swift Extensions</title>
      <link>https://www.andrewcbancroft.com/2014/11/03/the-5-ws-of-swift-extensions/</link>
      <pubDate>Mon, 03 Nov 2014 19:04:19 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/11/03/the-5-ws-of-swift-extensions/</guid>
      <description>For newcomers to Swift, the concept of extending a Type may be new, so I thought I&amp;#8217;d share a high-level overview of Swift extensions in the style of asking the 5 W&amp;#8217;s: Who? What? When? Where? Why?
Who &amp;#8220;Swift developers&amp;#8221; is a pretty obvious answer, but here are a scenarios to ask yourself about to see if you could make use of Swift extensions:
 &amp;#8220;I am relying on Types that are found in 3rd party frameworks or libraries and I wish I could add a little bit of functionality that isn&amp;#8217;t there out of the box.</description>
    </item>
    
    <item>
      <title>Send Text Message In-App – Using MFMessageComposeViewController with Swift</title>
      <link>https://www.andrewcbancroft.com/2014/10/28/send-text-message-in-app-using-mfmessagecomposeviewcontroller-with-swift/</link>
      <pubDate>Tue, 28 Oct 2014 11:00:37 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/10/28/send-text-message-in-app-using-mfmessagecomposeviewcontroller-with-swift/</guid>
      <description>In a previous walkthrough on sending e-mails in-app, I explored how to use MFMailComposeViewController to allow a user to compose an e-mail without ever leaving your app. I then followed up with a proposal for better-segregating the responsibilities of composing an e-mail and responding to the delegate callbacks out of the View Controller.
I say all this because today, I&amp;#8217;d like to walk you through sending a text message in-app using the same pattern as the second article.</description>
    </item>
    
    <item>
      <title>7 Reasons You Should Write About Swift</title>
      <link>https://www.andrewcbancroft.com/2014/10/23/7-reasons-you-should-write-about-swift/</link>
      <pubDate>Thu, 23 Oct 2014 12:00:13 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/10/23/7-reasons-you-should-write-about-swift/</guid>
      <description>If Swift is your iOS/Mac development language of choice, my goal in this post is to persuade you that you should not only write Swift&amp;#8230; you should write about Swift. Here are 7 reasons (in the order in which they flowed out of my brain):
1. Swift will never be new again. How amazing is it that every single Swift developer (besides the ones at Apple) had the opportunity to become a Swift developer simultaneously when Apple announced the new language at WWDC in June of 2014.</description>
    </item>
    
    <item>
      <title>Resolving “Variable used within its own initial value” Error in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/10/20/resolving-variable-used-within-its-own-initial-value-error-in-swift-2/</link>
      <pubDate>Mon, 20 Oct 2014 13:50:52 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/10/20/resolving-variable-used-within-its-own-initial-value-error-in-swift-2/</guid>
      <description>While experimenting with a few things today, I experienced this compiler error:
 Variable used within its own initial value
 Let me describe the situation I was in&amp;#8230;
I was playing (in a playground, no less) with closures, trying to mimic some behavior that I&amp;#8217;ve recently learned about in Scala. Essentially, I was trying to implement a factorial function as a closure, and I was trying to do it recursively (that is, without using a for/while loop).</description>
    </item>
    
    <item>
      <title>Rotate Animation in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/10/15/rotate-animation-in-swift/</link>
      <pubDate>Thu, 16 Oct 2014 02:57:24 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/10/15/rotate-animation-in-swift/</guid>
      <description>Updated on December 14, 2015 &amp;#8211; Swift 2.0 + new examples
With this post, I intend to wrap up my series on&amp;nbsp;animations as UIView Extensions in Swift&amp;#8230; for now. &amp;nbsp;Truthfully, these ideas flowed out of a real-world app that I was working on, which required various simple animations (fading in/out, sliding text, and now, rotating a view&amp;nbsp;360 degrees).
Since I&amp;#8217;ve given two other detailed walk-throughs on the topic, I&amp;#8217;ll try to be to-the-point on this one.</description>
    </item>
    
    <item>
      <title>Fundamentals of NSNotificationCenter in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/10/08/fundamentals-of-nsnotificationcenter-in-swift/</link>
      <pubDate>Wed, 08 Oct 2014 18:27:47 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/10/08/fundamentals-of-nsnotificationcenter-in-swift/</guid>
      <description>Updated on September 19, 2016 &amp;#8211; Xcode 8 &amp;amp; Swift 3.0
The goal of this post is to help you grasp the fundamentals of using NSNotificationCenter in your Swift iOS app. The topic isn&amp;#8217;t necessarily new, and there&amp;#8217;s no difference except syntax between Objective-C and Swift implementations involving NSNotificationCenter. Even still, I&amp;#8217;m hoping to add to the understanding of this useful tool by giving a fully-working example on GitHub (Swift 2.</description>
    </item>
    
    <item>
      <title>Swift Alternative to Objective-C Macros</title>
      <link>https://www.andrewcbancroft.com/2014/10/01/swift-alternative-to-objective-c-macros/</link>
      <pubDate>Wed, 01 Oct 2014 17:58:46 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/10/01/swift-alternative-to-objective-c-macros/</guid>
      <description>I&amp;#8217;ve previously written about using enumerations in Swift to encapsulate special values that could end up falling into the &amp;#8220;magic string&amp;#8221; category if they were to simply be scattered in-line throughout your code. The primary example I proposed for such a &amp;#8220;magic string&amp;#8221; replacement was Storyboard Segue Identifiers. These special identifiers have such a specific purpose that felt to me like a natural fit to create a Type in the form of an enumeration (which I called SegueIdentifier) to group them all together in one place so that I could easily find them and modify them, should I ever need to do so.</description>
    </item>
    
    <item>
      <title>Slide In Animation in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/09/24/slide-in-animation-in-swift/</link>
      <pubDate>Wed, 24 Sep 2014 18:25:52 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/09/24/slide-in-animation-in-swift/</guid>
      <description>In a previous post about fade animations in Swift, I demonstrated how to use a class extension to add the ability for any UIView instance to easily call fadeIn() or fadeOut() on itself. This strategy was nice &amp;#8211; the animations, while simple, would have cluttered my code each time I used them, had I not encapsulated them somewhere. Employing class extensions in Swift seemed a natural way to provide this functionality to UIViews.</description>
    </item>
    
    <item>
      <title>Swift iOS Version Checking</title>
      <link>https://www.andrewcbancroft.com/2014/09/17/swift-ios-version-check/</link>
      <pubDate>Thu, 18 Sep 2014 04:44:36 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/09/17/swift-ios-version-check/</guid>
      <description>While iOS 8 is now officially in the wild, it may take a bit of time to reach the level of user adoption that iOS 7 had accumulated over the past year. If you plan to target the widest number of users for your app (at least in these early days of the iOS 8 roll-out), it&amp;#8217;d probably be wise to include iOS 7 in your target audience.
When accommodating iOS 7 users, you&amp;#8217;ll inevitably run into instances where you need to check which iOS version the device is running, so that you can implement a fall-back plan for older versions of iOS.</description>
    </item>
    
    <item>
      <title>Create Documentation for your Swift Playground</title>
      <link>https://www.andrewcbancroft.com/2014/09/09/create-documentation-for-your-swift-playground/</link>
      <pubDate>Wed, 10 Sep 2014 03:44:16 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/09/09/create-documentation-for-your-swift-playground/</guid>
      <description>As I opened Apple&amp;#8217;s latest &amp;#8220;Patterns Playground&amp;#8221; blog post, I was impressed with the look and feel. Rather than create the documentation as comment blocks, they managed to put in sharp-looking notes and explanations before each code example / experiment. It&amp;#8217;s like an interactive book, reminiscent of the Swift Programming Language iBook! Here&amp;#8217;s a snippet of what their Playground looks like:

Of course, my immediate question / thought was, &amp;#8220;How&amp;#8217;d they do that?</description>
    </item>
    
    <item>
      <title>Replace Magic Strings with Enumerations in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/09/02/replace-magic-strings-with-enumerations-in-swift/</link>
      <pubDate>Wed, 03 Sep 2014 01:55:54 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/09/02/replace-magic-strings-with-enumerations-in-swift/</guid>
      <description>&amp;#8220;What can I do to avoid these &amp;#8216;magic strings&amp;#8217; in my code?&amp;#8221; &amp;#8211; This was the question I asked myself recently as I found myself in prepareForSegue comparing segue.segueIdentifier to in-line hard-coded Strings. This kind of in-line hard-coding of a String for comparison purposes is what I mean by &amp;#8220;magic strings&amp;#8221; in this article. I knew this felt like a bad idea, but the solution to a cleaner option wasn&amp;#8217;t readily apparent to me.</description>
    </item>
    
    <item>
      <title>Pick a Delegate… Any Delegate… On Clean View Controllers in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/08/26/pick-a-delegate-clean-view-controllers-in-swift/</link>
      <pubDate>Wed, 27 Aug 2014 04:43:29 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/26/pick-a-delegate-clean-view-controllers-in-swift/</guid>
      <description>The delegation pattern is ubiquitous in iOS development &amp;#8211; the pattern is&amp;nbsp;a &amp;#8220;core competency&amp;#8221; for developing in Cocoa, and if you program with the iOS SDK for any length of time and you&amp;#8217;ll end up writing some code that&amp;nbsp;resembles&amp;nbsp;someInstance.delegate = someDelegate.
One of the toughest things that I&amp;#8217;ve experienced is choosing what someDelegate&amp;nbsp;is. &amp;nbsp;All too often, a&amp;nbsp;View Controller ends up being assigned the responsibility of&amp;nbsp;being the delegate for everything in its hierarchy.</description>
    </item>
    
    <item>
      <title>Send Email In-App – Using MFMailComposeViewController with Swift</title>
      <link>https://www.andrewcbancroft.com/2014/08/25/send-email-in-app-using-mfmailcomposeviewcontroller-with-swift/</link>
      <pubDate>Tue, 26 Aug 2014 03:48:30 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/25/send-email-in-app-using-mfmailcomposeviewcontroller-with-swift/</guid>
      <description>Updated on October 11, 2016 &amp;#8211; Swift 3.0
In this writing, I want explore how to use MFMailComposeViewController with Swift to send e-mails within your app as a walkthrough. My focus here is &amp;#8220;quick and dirty&amp;#8221; pragmatism, so that we can easily see what the inter-working components of MFMailComposeViewController are. That being said, here&amp;#8217;s an important disclaimer &amp;#8211; I&amp;#8217;m going to overload the View Controller&amp;#8217;s responsibilities in the examples to follow.</description>
    </item>
    
    <item>
      <title>Expanded Thoughts on Swift’s Type Inference</title>
      <link>https://www.andrewcbancroft.com/2014/08/20/expanded-thoughts-on-swifts-type-inference/</link>
      <pubDate>Thu, 21 Aug 2014 02:19:45 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/20/expanded-thoughts-on-swifts-type-inference/</guid>
      <description>In my recent op-ed on clean coding in Swift focused on Type Inference, I began by saying,
 Quick! Tell me! What is the Type of the birdDetails constant in this code example:
let birdDetails = birdDetailsFromStorage() With no additional context to glean information from, the correct answer to the question is, &amp;#8220;I have absolutely no clue&amp;#8230;&amp;#8221;
 But is that concluding assertion true? Hmm&amp;#8230;
I&amp;#8217;m learning, and as I&amp;#8217;ve weighed a recent Twitter conversation and thought on a comment thread that Rob Napier made on the post quoted above, I&amp;#8217;m compelled to expand a little on my first post on Type Inference as it relates to clean code in Swift.</description>
    </item>
    
    <item>
      <title>Sort It Out – Sorting an Array in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/08/16/sort-yourself-out-sorting-an-array-in-swift/</link>
      <pubDate>Sat, 16 Aug 2014 18:06:26 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/16/sort-yourself-out-sorting-an-array-in-swift/</guid>
      <description>I had a question come to me today&amp;nbsp;regarding sorting an array of integers that are actually&amp;nbsp;encoded as strings in the array. &amp;nbsp;Data comes to is in a variety of encodings/types, so it&amp;#8217;s quite common to need to adjust things to the right state for working with. &amp;nbsp;Let&amp;#8217;s take a look at how to solve this one.
The Dilemma Given an array like this&amp;#8230;
let arrayOfIntsAsStrings = [&#34;103&#34;, &#34;2&#34;, &#34;1&#34;, &#34;</description>
    </item>
    
    <item>
      <title>Clean Coding in Swift – Type Inference</title>
      <link>https://www.andrewcbancroft.com/2014/08/12/clean-coding-in-swift-type-inference/</link>
      <pubDate>Wed, 13 Aug 2014 04:22:25 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/12/clean-coding-in-swift-type-inference/</guid>
      <description>Quick! Tell me! What is the Type of the birdDetails constant in this code example:
let birdDetails = birdDetailsFromStorage() With no additional context to glean information from, the correct answer to the question is, &amp;#8220;I have absolutely no clue&amp;#8230;&amp;#8221; Or is it?
&amp;#8220;Not fair!&amp;#8221;, you say. &amp;#8220;In the real world, I&amp;#8217;d have the ability to option-click and learn the type from a pop-up tooltip, or learn this information by inspection from XCode&amp;#8217;s utilities panel.</description>
    </item>
    
    <item>
      <title>Clean Coding in Swift – Functions</title>
      <link>https://www.andrewcbancroft.com/2014/08/07/clean-coding-in-swift-functions/</link>
      <pubDate>Thu, 07 Aug 2014 18:16:23 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/07/clean-coding-in-swift-functions/</guid>
      <description>I&amp;#8217;ve been thinking a lot about how the principles of clean coding (Bob Martin&amp;#8217;s &amp;#8220;Clean Code&amp;#8220;) apply in Swift. How do I express clean code in this language? Conversely, how do I avoid writing cryptic code in Swift? What language features help me write clear and self-explanatory code and what language features present the potential for tempting me to write obscure code in Swift?
I am beginning a commentary series that I hope will encourage clean coding practice in myself and in the Swift developer community.</description>
    </item>
    
    <item>
      <title>Fade In / Out Animations as Class Extensions in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/07/27/fade-in-out-animations-as-class-extensions-with-swift/</link>
      <pubDate>Sun, 27 Jul 2014 20:13:53 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/27/fade-in-out-animations-as-class-extensions-with-swift/</guid>
      <description>Updated on December 6, 2016 &amp;#8211; Xcode 8 &amp;amp; Swift 3.0
The question has been asked (and solved) on StackOverflow in Objective-C, but my aim in this post is to take the Objective-C implementation and leverage Swift extensions to make this job even easier to achieve and reuse.
Jump to&amp;#8230;   Fading without an extension   Refactoring using Swift extensions    Step 1 &amp;#8211; Create UIViewExtensions.</description>
    </item>
    
    <item>
      <title>Swift Optionals?  Don’t Forget to Unwrap!</title>
      <link>https://www.andrewcbancroft.com/2014/07/25/swift-optionals-dont-forget-to-unwrap/</link>
      <pubDate>Sat, 26 Jul 2014 02:23:53 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/25/swift-optionals-dont-forget-to-unwrap/</guid>
      <description>There is a compiler error that throws me off every time I see it. It takes the form,
 &amp;#8216;ClassName?&amp;#8217; does not have a member named &amp;#8216;memberName&amp;#8217;
 This can happen when you&amp;#8217;ve declared a variable as an optional, but forget to unwrap that optional when you attempt to call a method on it.
For example, given this class definition:
class Bird { var family: String var color: String init(family: String, color: String) { self.</description>
    </item>
    
    <item>
      <title>Swift Access Control – Implications for Unit Testing</title>
      <link>https://www.andrewcbancroft.com/2014/07/22/swift-access-control-implications-for-unit-testing/</link>
      <pubDate>Wed, 23 Jul 2014 04:04:43 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/22/swift-access-control-implications-for-unit-testing/</guid>
      <description>If you find yourself with broken unit tests, failing to build with the error, “Use of unresolved identifier&amp;#8230;”, you&amp;#8217;re not alone!
Unit Tests and Swift Access Control When Swift access control came into the picture, we suddenly had a little more to consider. From the Apple docs:
Swift access control has three access levels:
 private entities can only be accessed from within the source file where they are defined.</description>
    </item>
    
    <item>
      <title>Implement NSManagedObject Subclass in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/07/17/implement-nsmanagedobject-subclass-in-swift/</link>
      <pubDate>Fri, 18 Jul 2014 04:08:12 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/17/implement-nsmanagedobject-subclass-in-swift/</guid>
      <description>Updated on July 8, 2016 – Xcode 7
My goal with this blog entry is to help get you set up to create NSManagedObject subclasses in Swift for the Entities in your Core Data model.
Jump to&amp;#8230;   Example   Walkthrough    Create an Entity   Create an NSManagedObject Subclass for that Entity   Verify NSManagedObject class in the &amp;#8220;Data Model Inspector&amp;#8221;</description>
    </item>
    
    <item>
      <title>How to Create Mocks and Stubs in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/07/15/how-to-create-mocks-and-stubs-in-swift/</link>
      <pubDate>Tue, 15 Jul 2014 05:12:16 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/15/how-to-create-mocks-and-stubs-in-swift/</guid>
      <description>Without 100% support for a mocking framework like OCMock, I found myself needing to get creative when building&amp;nbsp;mock objects and method stubs in Swift unit tests. &amp;nbsp;The great thing about testing is that you&amp;#8217;re&amp;#8230;well&amp;#8230;&amp;nbsp;testing things out to see if they&amp;#8217;ll work, and I found a solution that I&amp;#8217;m pretty happy&amp;nbsp;with for now. &amp;nbsp;I&amp;#8217;m open to better ways, so leave a comment if you&amp;#8217;ve had good results using a different design!</description>
    </item>
    
  </channel>
</rss>