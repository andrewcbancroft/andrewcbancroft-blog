<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS / Mac on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/categories/ios-/-mac/</link>
    <description>Recent content in iOS / Mac on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Apr 2017 13:35:04 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/categories/ios-/-mac/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Every Developer is an API Designer</title>
      <link>https://www.andrewcbancroft.com/2017/04/25/every-developer-api-designer/</link>
      <pubDate>Tue, 25 Apr 2017 13:35:04 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/04/25/every-developer-api-designer/</guid>
      <description>Every function; every class; every struct and enum and protocol is an API.
YOU &amp;#8212; are an API designer As developers, we move into and out of the role of &amp;#8220;API Designer&amp;#8221; constantly.
Have you ever thought about that? You are an API designer! You create Application Programming Interfaces all the time.
I believe that everything we create has design built in, whether we&amp;#8217;ve thought much about it or not.</description>
    </item>
    
    <item>
      <title>Solving React Native’s “No bundle url present” Error</title>
      <link>https://www.andrewcbancroft.com/2017/04/22/solving-react-natives-no-bundle-url-present-error/</link>
      <pubDate>Sat, 22 Apr 2017 17:49:11 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/04/22/solving-react-natives-no-bundle-url-present-error/</guid>
      <description>I hit the &amp;#8220;No bundle url present.&amp;#8221; roadblock today and had to dig a bit to find the solution. I&amp;#8217;m going to describe how I encountered the problem, and provide the solution that&amp;#8217;s worked more than once for me, ever since I found the suggestion in the React Native GitHub repository.
Jump to&amp;#8230;   The Problem   The Solution   Was this article helpful? Please share!</description>
    </item>
    
    <item>
      <title>Disabling Xcode’s OS-Level Debug Logging</title>
      <link>https://www.andrewcbancroft.com/2016/10/28/disabling-xcode-os-level-debug-logging/</link>
      <pubDate>Fri, 28 Oct 2016 05:06:19 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/10/28/disabling-xcode-os-level-debug-logging/</guid>
      <description>Full credit to Russell Ivanovic for his tweet for figuring out how to disable Xcode 8&amp;#8217;s extremely chatty debug console logging. I just wanted this here for my own reference, but perhaps it&amp;#8217;s helpful to you as well.
If you&amp;#8217;re tired of sifting through operating system-level logging to the debug console while you&amp;#8217;re debugging your app, it&amp;#8217;s actually fairly easy to silence.
Jump to&amp;#8230;   Edit the scheme for your app   Add a new environment variable for OS_ACTIVITY_MODE   Was this article helpful?</description>
    </item>
    
    <item>
      <title>Deploying Parse Dashboard</title>
      <link>https://www.andrewcbancroft.com/2016/04/17/deploying-parse-dashboard/</link>
      <pubDate>Sun, 17 Apr 2016 21:56:45 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/04/17/deploying-parse-dashboard/</guid>
      <description>Below are steps that I&amp;#8217;ve taken, myself, to deploy the Parse Dashboard to a cloud host, such as Azure, or Heroku.
Jump to&amp;#8230;   Clone parse-dashboard git repository   Run npm install   Edit parse-dashboard-config.json   Modify local .gitignore   Stage and commit all changes   Set up private git repository   Add new remote to your local parse-dashboard git repository   Push to your private git repository   Create app on the cloud host   Configure cloud host for git deployment   Enable SSL (or run as insecure app)   You might also enjoy&amp;#8230;   Was this article helpful?</description>
    </item>
    
    <item>
      <title>FIX – Query in Parse Cloud Code Returns Unauthorized Error</title>
      <link>https://www.andrewcbancroft.com/2016/04/05/fix-query-in-parse-cloud-code-returns-unauthorized-error/</link>
      <pubDate>Wed, 06 Apr 2016 04:27:49 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2016/04/05/fix-query-in-parse-cloud-code-returns-unauthorized-error/</guid>
      <description>The Parse migration process has begun &amp;#8211; I&amp;#8217;ve got a couple of small apps that used this backend as a service because the backend was simple and Parse was free.
The migration has gone fairly smooth so far, but I hit a wall and have been struggling to figure out the solution for about 3 hours. 3 hours too many, haha!
Jump to&amp;#8230;   Problem Overview   Solution   Was this article helpful?</description>
    </item>
    
    <item>
      <title>NSNotificationCenter vs Delegation – An Analysis</title>
      <link>https://www.andrewcbancroft.com/2015/02/05/nsnotificationcenter-vs-delegation-analysis/</link>
      <pubDate>Thu, 05 Feb 2015 13:00:26 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/02/05/nsnotificationcenter-vs-delegation-analysis/</guid>
      <description>In Fundamentals of NSNotificationCenter in Swift, a commenter asked me to elaborate on a response I&amp;#8217;d given to a dialog going on below the blog post. I had stated:
 If you need a more structured environment around your [instance]-to-[instance] communication, delegates &amp;#8230; are probably a better choice [than NSNotificationCenter].
 I&amp;#8217;ve been thinking for some time since I responded with that comment. What do I mean when I say &amp;#8220;if you need a more structured environment&amp;#8221;&amp;#8230; What does that even look like?</description>
    </item>
    
    <item>
      <title>Unit Testing Model Layer with Core Data and Swift</title>
      <link>https://www.andrewcbancroft.com/2015/01/13/unit-testing-model-layer-core-data-swift/</link>
      <pubDate>Tue, 13 Jan 2015 13:00:37 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/01/13/unit-testing-model-layer-core-data-swift/</guid>
      <description>Updated on November 19, 2015 &amp;#8211; Swift 2.0
As I approached testing my Core Data model, I have to admit I was apprehensive. How in the world was I going to write unit tests for my model layer that depended on a database. Past experience with trying to write tests with databases was painful. I feared the same would be the case with Core Data.
To my surprise, unit testing my Core Data model layer has been… well… amazing.</description>
    </item>
    
    <item>
      <title>Immutable Types with Changing State in Swift</title>
      <link>https://www.andrewcbancroft.com/2015/01/06/immutable-types-changing-state-swift/</link>
      <pubDate>Tue, 06 Jan 2015 12:00:50 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/01/06/immutable-types-changing-state-swift/</guid>
      <description>Dabble in Swift for long and the functional programming paradigm will most certainly appear on your radar. From conferences to books to blog posts, I&amp;#8217;ve seen a lot in the functional programming arena as it relates to Swift.
As I seek to improve my functional programming thought processes and to practice what I&amp;#8217;m learning, I found myself struggling with a fundamental concept: immutability. Especially when I&amp;#8217;m designing something that, at the very least, appears to require the ability to change state at some point in time.</description>
    </item>
    
    <item>
      <title>Getting Started with Unit Testing in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/12/29/getting-started-unit-testing-swift/</link>
      <pubDate>Mon, 29 Dec 2014 12:00:50 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/12/29/getting-started-unit-testing-swift/</guid>
      <description>Getting set up to write unit tests in Swift, while not difficult, isn&amp;#8217;t exactly intuitive. I&amp;#8217;ve written several posts and gathered a few resources on unit testing in Swift, but I haven&amp;#8217;t yet published a &amp;#8220;getting started&amp;#8221; guide until now.
Where does one get started with unit testing in Swift when they&amp;#8217;ve never gotten started before? Here are 5 steps to help you successfully begin unit testing in Swift:</description>
    </item>
    
    <item>
      <title>Swift Unit Testing – Verifying Method Calls</title>
      <link>https://www.andrewcbancroft.com/2014/12/22/swift-unit-testing-verifying-method-calls/</link>
      <pubDate>Mon, 22 Dec 2014 13:09:28 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/12/22/swift-unit-testing-verifying-method-calls/</guid>
      <description>In this unit testing screencast for Swift developers, we explore how to use Test Driven Development to verify method calls.
Getting Started Guide If you&amp;#8217;re new to unit testing or are trying to get set up with unit testing in a Swift project, you might check out my getting started guide before jumping into the screencast.
Screencast Large / Full-Screen Viewing
GitHub Example GitHub repo of the example developed in the screencast.</description>
    </item>
    
    <item>
      <title>Swift Unit Testing Resources</title>
      <link>https://www.andrewcbancroft.com/2014/12/19/swift-unit-testing-resources/</link>
      <pubDate>Fri, 19 Dec 2014 12:00:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/12/19/swift-unit-testing-resources/</guid>
      <description>As I&amp;#8217;ve researched Test Driven Development practices in general, and for iOS / Mac applications, I&amp;#8217;ve been helped by several sources. I&amp;#8217;ve also discovered a few things the hard way, so I&amp;#8217;m combining and maintaining this list of resources to help point you in some helpful directions as you adventure in unit testing your iOS apps.
Jump to&amp;#8230;   Pluralsight courses   Blogs   User group talks   At andrewcbancroft.</description>
    </item>
    
    <item>
      <title>TDD for iOS in Swift – What’s the Goal?</title>
      <link>https://www.andrewcbancroft.com/2014/12/16/tdd-ios-swift-whats-goal/</link>
      <pubDate>Tue, 16 Dec 2014 12:00:10 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/12/16/tdd-ios-swift-whats-goal/</guid>
      <description>Before actually doing Test Driven Development (TDD) for your iOS / Mac app, it&amp;#8217;s really important to ask a very fundamental question: What&amp;#8217;s the goal? What am I aiming for when I say I want to drive my iOS development with tests?
2 Goals of TDD in iOS A recent course I watched on Pluralsight called TDD as a Design Tool gave me some insight on two goals for doing Test Driven Development:</description>
    </item>
    
    <item>
      <title>Don’t Write Legacy Swift</title>
      <link>https://www.andrewcbancroft.com/2014/12/10/dont-write-legacy-swift/</link>
      <pubDate>Wed, 10 Dec 2014 12:00:51 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/12/10/dont-write-legacy-swift/</guid>
      <description>“Legacy Swift”.&amp;nbsp; Is that an odd phrase to you, too?
“Legacy” has connotations such as “old”, “difficult-to-change”, “outdated”, etc. Juxtaposing “legacy” and “Swift” would never have crossed my mind until I read Michael Feathers’, Working Effectively With Legacy Code, where he asserts,
 Legacy code is simply code without tests.
 What an impact those words had on me as I’ve transitioned over to Swift from Objective-C.&amp;nbsp; If it’s true that legacy code is code without tests, it’s easy to see how you and I could be writing legacy Swift, even though Swift is a brand new language!</description>
    </item>
    
    <item>
      <title>Send a Type to Obedience School – Using Swift Extensions for Additional Protocol Conformance</title>
      <link>https://www.andrewcbancroft.com/2014/12/02/send-a-type-to-obedience-school-using-swift-extensions-for-additional-protocol-conformance/</link>
      <pubDate>Tue, 02 Dec 2014 19:15:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/12/02/send-a-type-to-obedience-school-using-swift-extensions-for-additional-protocol-conformance/</guid>
      <description>Did you know that you can make any Type (here meaning Class, Enumeration, or Struct), even already-existing ones that you don&amp;#8217;t have the source code for, adopt a protocol that it doesn&amp;#8217;t normally conform to out of the box?
You can &amp;#8211; even if you don&amp;#8217;t have the original source code for that Type! It&amp;#8217;s a powerful and intriguing proposition. Let&amp;#8217;s explore how this is possible.
How, you ask? Well, as the title of this article suggests, Swift extensions are the way to do it.</description>
    </item>
    
    <item>
      <title>Swift UITableViewDataSource Cheat Sheet</title>
      <link>https://www.andrewcbancroft.com/2014/11/24/swift-uitableviewdatasource-cheat-sheet/</link>
      <pubDate>Mon, 24 Nov 2014 22:04:28 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/11/24/swift-uitableviewdatasource-cheat-sheet/</guid>
      <description>iOS developers will quickly recognize that there are a set of methods that always tend to get implemented when dealing with UITableViews . The problem I consistently face is remembering that set of methods that belong to the UITableViewDataSource (and UITableViewDelegate ) protocols. I find myself option-clicking the protocol name to remember the method signatures I need, since XCode doesn&amp;#8217;t have a way to stub out the methods involved with a protocol (C# developers working in Visual Studio like myself are spoiled!</description>
    </item>
    
    <item>
      <title>The 5 W’s of Swift Extensions</title>
      <link>https://www.andrewcbancroft.com/2014/11/03/the-5-ws-of-swift-extensions/</link>
      <pubDate>Mon, 03 Nov 2014 19:04:19 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/11/03/the-5-ws-of-swift-extensions/</guid>
      <description>For newcomers to Swift, the concept of extending a Type may be new, so I thought I&amp;#8217;d share a high-level overview of Swift extensions in the style of asking the 5 W&amp;#8217;s: Who? What? When? Where? Why?
Who &amp;#8220;Swift developers&amp;#8221; is a pretty obvious answer, but here are a scenarios to ask yourself about to see if you could make use of Swift extensions:
 &amp;#8220;I am relying on Types that are found in 3rd party frameworks or libraries and I wish I could add a little bit of functionality that isn&amp;#8217;t there out of the box.</description>
    </item>
    
    <item>
      <title>Send Text Message In-App – Using MFMessageComposeViewController with Swift</title>
      <link>https://www.andrewcbancroft.com/2014/10/28/send-text-message-in-app-using-mfmessagecomposeviewcontroller-with-swift/</link>
      <pubDate>Tue, 28 Oct 2014 11:00:37 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/10/28/send-text-message-in-app-using-mfmessagecomposeviewcontroller-with-swift/</guid>
      <description>In a previous walkthrough on sending e-mails in-app, I explored how to use MFMailComposeViewController to allow a user to compose an e-mail without ever leaving your app. I then followed up with a proposal for better-segregating the responsibilities of composing an e-mail and responding to the delegate callbacks out of the View Controller.
I say all this because today, I&amp;#8217;d like to walk you through sending a text message in-app using the same pattern as the second article.</description>
    </item>
    
    <item>
      <title>Fundamentals of NSNotificationCenter in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/10/08/fundamentals-of-nsnotificationcenter-in-swift/</link>
      <pubDate>Wed, 08 Oct 2014 18:27:47 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/10/08/fundamentals-of-nsnotificationcenter-in-swift/</guid>
      <description>Updated on September 19, 2016 &amp;#8211; Xcode 8 &amp;amp; Swift 3.0
The goal of this post is to help you grasp the fundamentals of using NSNotificationCenter in your Swift iOS app. The topic isn&amp;#8217;t necessarily new, and there&amp;#8217;s no difference except syntax between Objective-C and Swift implementations involving NSNotificationCenter. Even still, I&amp;#8217;m hoping to add to the understanding of this useful tool by giving a fully-working example on GitHub (Swift 2.</description>
    </item>
    
    <item>
      <title>Swift Alternative to Objective-C Macros</title>
      <link>https://www.andrewcbancroft.com/2014/10/01/swift-alternative-to-objective-c-macros/</link>
      <pubDate>Wed, 01 Oct 2014 17:58:46 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/10/01/swift-alternative-to-objective-c-macros/</guid>
      <description>I&amp;#8217;ve previously written about using enumerations in Swift to encapsulate special values that could end up falling into the &amp;#8220;magic string&amp;#8221; category if they were to simply be scattered in-line throughout your code. The primary example I proposed for such a &amp;#8220;magic string&amp;#8221; replacement was Storyboard Segue Identifiers. These special identifiers have such a specific purpose that felt to me like a natural fit to create a Type in the form of an enumeration (which I called SegueIdentifier) to group them all together in one place so that I could easily find them and modify them, should I ever need to do so.</description>
    </item>
    
    <item>
      <title>Slide In Animation in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/09/24/slide-in-animation-in-swift/</link>
      <pubDate>Wed, 24 Sep 2014 18:25:52 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/09/24/slide-in-animation-in-swift/</guid>
      <description>In a previous post about fade animations in Swift, I demonstrated how to use a class extension to add the ability for any UIView instance to easily call fadeIn() or fadeOut() on itself. This strategy was nice &amp;#8211; the animations, while simple, would have cluttered my code each time I used them, had I not encapsulated them somewhere. Employing class extensions in Swift seemed a natural way to provide this functionality to UIViews.</description>
    </item>
    
    <item>
      <title>Swift iOS Version Checking</title>
      <link>https://www.andrewcbancroft.com/2014/09/17/swift-ios-version-check/</link>
      <pubDate>Thu, 18 Sep 2014 04:44:36 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/09/17/swift-ios-version-check/</guid>
      <description>While iOS 8 is now officially in the wild, it may take a bit of time to reach the level of user adoption that iOS 7 had accumulated over the past year. If you plan to target the widest number of users for your app (at least in these early days of the iOS 8 roll-out), it&amp;#8217;d probably be wise to include iOS 7 in your target audience.
When accommodating iOS 7 users, you&amp;#8217;ll inevitably run into instances where you need to check which iOS version the device is running, so that you can implement a fall-back plan for older versions of iOS.</description>
    </item>
    
    <item>
      <title>Create Documentation for your Swift Playground</title>
      <link>https://www.andrewcbancroft.com/2014/09/09/create-documentation-for-your-swift-playground/</link>
      <pubDate>Wed, 10 Sep 2014 03:44:16 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/09/09/create-documentation-for-your-swift-playground/</guid>
      <description>As I opened Apple&amp;#8217;s latest &amp;#8220;Patterns Playground&amp;#8221; blog post, I was impressed with the look and feel. Rather than create the documentation as comment blocks, they managed to put in sharp-looking notes and explanations before each code example / experiment. It&amp;#8217;s like an interactive book, reminiscent of the Swift Programming Language iBook! Here&amp;#8217;s a snippet of what their Playground looks like:

Of course, my immediate question / thought was, &amp;#8220;How&amp;#8217;d they do that?</description>
    </item>
    
    <item>
      <title>Replace Magic Strings with Enumerations in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/09/02/replace-magic-strings-with-enumerations-in-swift/</link>
      <pubDate>Wed, 03 Sep 2014 01:55:54 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/09/02/replace-magic-strings-with-enumerations-in-swift/</guid>
      <description>&amp;#8220;What can I do to avoid these &amp;#8216;magic strings&amp;#8217; in my code?&amp;#8221; &amp;#8211; This was the question I asked myself recently as I found myself in prepareForSegue comparing segue.segueIdentifier to in-line hard-coded Strings. This kind of in-line hard-coding of a String for comparison purposes is what I mean by &amp;#8220;magic strings&amp;#8221; in this article. I knew this felt like a bad idea, but the solution to a cleaner option wasn&amp;#8217;t readily apparent to me.</description>
    </item>
    
    <item>
      <title>Pick a Delegate… Any Delegate… On Clean View Controllers in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/08/26/pick-a-delegate-clean-view-controllers-in-swift/</link>
      <pubDate>Wed, 27 Aug 2014 04:43:29 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/26/pick-a-delegate-clean-view-controllers-in-swift/</guid>
      <description>The delegation pattern is ubiquitous in iOS development &amp;#8211; the pattern is&amp;nbsp;a &amp;#8220;core competency&amp;#8221; for developing in Cocoa, and if you program with the iOS SDK for any length of time and you&amp;#8217;ll end up writing some code that&amp;nbsp;resembles&amp;nbsp;someInstance.delegate = someDelegate.
One of the toughest things that I&amp;#8217;ve experienced is choosing what someDelegate&amp;nbsp;is. &amp;nbsp;All too often, a&amp;nbsp;View Controller ends up being assigned the responsibility of&amp;nbsp;being the delegate for everything in its hierarchy.</description>
    </item>
    
    <item>
      <title>Send Email In-App – Using MFMailComposeViewController with Swift</title>
      <link>https://www.andrewcbancroft.com/2014/08/25/send-email-in-app-using-mfmailcomposeviewcontroller-with-swift/</link>
      <pubDate>Tue, 26 Aug 2014 03:48:30 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/25/send-email-in-app-using-mfmailcomposeviewcontroller-with-swift/</guid>
      <description>Updated on October 11, 2016 &amp;#8211; Swift 3.0
In this writing, I want explore how to use MFMailComposeViewController with Swift to send e-mails within your app as a walkthrough. My focus here is &amp;#8220;quick and dirty&amp;#8221; pragmatism, so that we can easily see what the inter-working components of MFMailComposeViewController are. That being said, here&amp;#8217;s an important disclaimer &amp;#8211; I&amp;#8217;m going to overload the View Controller&amp;#8217;s responsibilities in the examples to follow.</description>
    </item>
    
    <item>
      <title>Expanded Thoughts on Swift’s Type Inference</title>
      <link>https://www.andrewcbancroft.com/2014/08/20/expanded-thoughts-on-swifts-type-inference/</link>
      <pubDate>Thu, 21 Aug 2014 02:19:45 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/20/expanded-thoughts-on-swifts-type-inference/</guid>
      <description>In my recent op-ed on clean coding in Swift focused on Type Inference, I began by saying,
 Quick! Tell me! What is the Type of the birdDetails constant in this code example:
let birdDetails = birdDetailsFromStorage() With no additional context to glean information from, the correct answer to the question is, &amp;#8220;I have absolutely no clue&amp;#8230;&amp;#8221;
 But is that concluding assertion true? Hmm&amp;#8230;
I&amp;#8217;m learning, and as I&amp;#8217;ve weighed a recent Twitter conversation and thought on a comment thread that Rob Napier made on the post quoted above, I&amp;#8217;m compelled to expand a little on my first post on Type Inference as it relates to clean code in Swift.</description>
    </item>
    
    <item>
      <title>Sort It Out – Sorting an Array in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/08/16/sort-yourself-out-sorting-an-array-in-swift/</link>
      <pubDate>Sat, 16 Aug 2014 18:06:26 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/16/sort-yourself-out-sorting-an-array-in-swift/</guid>
      <description>I had a question come to me today&amp;nbsp;regarding sorting an array of integers that are actually&amp;nbsp;encoded as strings in the array. &amp;nbsp;Data comes to is in a variety of encodings/types, so it&amp;#8217;s quite common to need to adjust things to the right state for working with. &amp;nbsp;Let&amp;#8217;s take a look at how to solve this one.
The Dilemma Given an array like this&amp;#8230;
let arrayOfIntsAsStrings = [&#34;103&#34;, &#34;2&#34;, &#34;1&#34;, &#34;</description>
    </item>
    
    <item>
      <title>Clean Coding in Swift – Type Inference</title>
      <link>https://www.andrewcbancroft.com/2014/08/12/clean-coding-in-swift-type-inference/</link>
      <pubDate>Wed, 13 Aug 2014 04:22:25 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/12/clean-coding-in-swift-type-inference/</guid>
      <description>Quick! Tell me! What is the Type of the birdDetails constant in this code example:
let birdDetails = birdDetailsFromStorage() With no additional context to glean information from, the correct answer to the question is, &amp;#8220;I have absolutely no clue&amp;#8230;&amp;#8221; Or is it?
&amp;#8220;Not fair!&amp;#8221;, you say. &amp;#8220;In the real world, I&amp;#8217;d have the ability to option-click and learn the type from a pop-up tooltip, or learn this information by inspection from XCode&amp;#8217;s utilities panel.</description>
    </item>
    
    <item>
      <title>Clean Coding in Swift – Functions</title>
      <link>https://www.andrewcbancroft.com/2014/08/07/clean-coding-in-swift-functions/</link>
      <pubDate>Thu, 07 Aug 2014 18:16:23 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/08/07/clean-coding-in-swift-functions/</guid>
      <description>I&amp;#8217;ve been thinking a lot about how the principles of clean coding (Bob Martin&amp;#8217;s &amp;#8220;Clean Code&amp;#8220;) apply in Swift. How do I express clean code in this language? Conversely, how do I avoid writing cryptic code in Swift? What language features help me write clear and self-explanatory code and what language features present the potential for tempting me to write obscure code in Swift?
I am beginning a commentary series that I hope will encourage clean coding practice in myself and in the Swift developer community.</description>
    </item>
    
    <item>
      <title>Fade In / Out Animations as Class Extensions in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/07/27/fade-in-out-animations-as-class-extensions-with-swift/</link>
      <pubDate>Sun, 27 Jul 2014 20:13:53 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/27/fade-in-out-animations-as-class-extensions-with-swift/</guid>
      <description>Updated on December 6, 2016 &amp;#8211; Xcode 8 &amp;amp; Swift 3.0
The question has been asked (and solved) on StackOverflow in Objective-C, but my aim in this post is to take the Objective-C implementation and leverage Swift extensions to make this job even easier to achieve and reuse.
Jump to&amp;#8230;   Fading without an extension   Refactoring using Swift extensions    Step 1 &amp;#8211; Create UIViewExtensions.</description>
    </item>
    
    <item>
      <title>Swift Optionals?  Don’t Forget to Unwrap!</title>
      <link>https://www.andrewcbancroft.com/2014/07/25/swift-optionals-dont-forget-to-unwrap/</link>
      <pubDate>Sat, 26 Jul 2014 02:23:53 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/25/swift-optionals-dont-forget-to-unwrap/</guid>
      <description>There is a compiler error that throws me off every time I see it. It takes the form,
 &amp;#8216;ClassName?&amp;#8217; does not have a member named &amp;#8216;memberName&amp;#8217;
 This can happen when you&amp;#8217;ve declared a variable as an optional, but forget to unwrap that optional when you attempt to call a method on it.
For example, given this class definition:
class Bird { var family: String var color: String init(family: String, color: String) { self.</description>
    </item>
    
    <item>
      <title>Swift Access Control – Implications for Unit Testing</title>
      <link>https://www.andrewcbancroft.com/2014/07/22/swift-access-control-implications-for-unit-testing/</link>
      <pubDate>Wed, 23 Jul 2014 04:04:43 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/22/swift-access-control-implications-for-unit-testing/</guid>
      <description>If you find yourself with broken unit tests, failing to build with the error, “Use of unresolved identifier&amp;#8230;”, you&amp;#8217;re not alone!
Unit Tests and Swift Access Control When Swift access control came into the picture, we suddenly had a little more to consider. From the Apple docs:
Swift access control has three access levels:
 private entities can only be accessed from within the source file where they are defined.</description>
    </item>
    
    <item>
      <title>Implement NSManagedObject Subclass in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/07/17/implement-nsmanagedobject-subclass-in-swift/</link>
      <pubDate>Fri, 18 Jul 2014 04:08:12 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/17/implement-nsmanagedobject-subclass-in-swift/</guid>
      <description>Updated on July 8, 2016 – Xcode 7
My goal with this blog entry is to help get you set up to create NSManagedObject subclasses in Swift for the Entities in your Core Data model.
Jump to&amp;#8230;   Example   Walkthrough    Create an Entity   Create an NSManagedObject Subclass for that Entity   Verify NSManagedObject class in the &amp;#8220;Data Model Inspector&amp;#8221;</description>
    </item>
    
    <item>
      <title>How to Create Mocks and Stubs in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/07/15/how-to-create-mocks-and-stubs-in-swift/</link>
      <pubDate>Tue, 15 Jul 2014 05:12:16 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/15/how-to-create-mocks-and-stubs-in-swift/</guid>
      <description>Without 100% support for a mocking framework like OCMock, I found myself needing to get creative when building&amp;nbsp;mock objects and method stubs in Swift unit tests. &amp;nbsp;The great thing about testing is that you&amp;#8217;re&amp;#8230;well&amp;#8230;&amp;nbsp;testing things out to see if they&amp;#8217;ll work, and I found a solution that I&amp;#8217;m pretty happy&amp;nbsp;with for now. &amp;nbsp;I&amp;#8217;m open to better ways, so leave a comment if you&amp;#8217;ve had good results using a different design!</description>
    </item>
    
    <item>
      <title>iOS KeychainItemWrapper – Obstacles Overcome, Inconsistencies Resolved</title>
      <link>https://www.andrewcbancroft.com/2014/05/21/ios-keychainitemwrapper-obstacles-overcome-inconsistencies-resolved/</link>
      <pubDate>Wed, 21 May 2014 18:20:56 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/05/21/ios-keychainitemwrapper-obstacles-overcome-inconsistencies-resolved/</guid>
      <description>I had a major case of &amp;#8220;struggleface&amp;#8221; when trying to work with the KeychainItemWrapper for iOS. I wanted it to be simple &amp;#8211; just take a username and password and put it in the iOS Keychain for secure retrieval later. Turns out that I had to spend an entire work day and do a lot of Googling to get it working so I&amp;#8217;m posting this to try and bring all the pieces together.</description>
    </item>
    
    <item>
      <title>How Old is Silas Allen?</title>
      <link>https://www.andrewcbancroft.com/2013/03/31/how-old-is-silas-allen/</link>
      <pubDate>Sun, 31 Mar 2013 14:36:07 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2013/03/31/how-old-is-silas-allen/</guid>
      <description>&amp;#8220;Ooooohh, now&amp;#8230; how old is he??&amp;#8221; I love this question. Really! I do! Every time I&amp;#8217;m asked I get to talk about my kid, and that&amp;#8217;s always fun. But today, things just got even more fun. Now, instead of just telling people his approximate age, I can show them his precise age down to the second!
As some of you know, I&amp;#8217;ve been nerding out on learning to build iOS apps for iPhone and iPad.</description>
    </item>
    
    <item>
      <title>Journey in iOS Development Series – In the Beginning…</title>
      <link>https://www.andrewcbancroft.com/2013/03/16/learning-ios-development/</link>
      <pubDate>Sat, 16 Mar 2013 19:51:59 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2013/03/16/learning-ios-development/</guid>
      <description>Today I&amp;#8217;m starting a series related to my journey in learning to develop iOS apps. As lightbulbs come on for me, I plan to write up what I&amp;#8217;m learning, if nothing else for my own reference. But I do hope my readers enjoy the discoveries I make along the way.
These first few blogs will be somewhat autobiographical, so hopefully I don&amp;#8217;t bore you to death. I&amp;#8217;ll try and make them quick.</description>
    </item>
    
  </channel>
</rss>