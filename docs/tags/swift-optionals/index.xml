<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift Optionals on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/swift-optionals/</link>
    <description>Recent content in Swift Optionals on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Apr 2017 20:03:34 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/swift-optionals/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Core Data Model Attributes and NSManagedObject Property Types Must Match!</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/data-persistence/core-data-model-attributes-and-nsmanagedobject-property-types-must-match/</link>
      <pubDate>Sun, 23 Apr 2017 20:03:34 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/data-persistence/core-data-model-attributes-and-nsmanagedobject-property-types-must-match/</guid>
      <description>I admit – it might have taken me less time to figure out my runtime exception if I hadn&amp;rsquo;t just migrated my project to Swift 3 when I encountered the bug.
That&amp;rsquo;s the problem isn&amp;rsquo;t it? You go in&amp;#8230; you intend to do one thing. Before long, you&amp;rsquo;ve got 15 files with an M out to the right. The project builds (finally), but ah – then there&amp;rsquo;s runtime.
When the crash occurs, you&amp;rsquo;re never sure if it was an existing problem, or if it was caused by the code conversion.</description>
    </item>
    
    <item>
      <title>How to Unwrap Multiple Optionals with One If-Let in Swift</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/how-to-unwrap-multiple-optionals-with-one-if-let-in-swift/</link>
      <pubDate>Wed, 19 Apr 2017 17:25:41 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/how-to-unwrap-multiple-optionals-with-one-if-let-in-swift/</guid>
      <description>What do you do when you&amp;rsquo;ve got two (or more) optionals that you need to safely unwrap and work with?
Code examples Suppose that you&amp;rsquo;ve got two arrays, both of which are optional. What I want to do right now is walk through a couple of scenarios where I unwrap them at the same time and print them to the console with a single if-let statement.
First, watch how it&amp;rsquo;s done to accomplish the goal of this article&amp;rsquo;s title.</description>
    </item>
    
    <item>
      <title>Force Unwrapping Swift Optionals:  Code Smell!</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/force-unwrapping-swift-optionals-code-smell/</link>
      <pubDate>Tue, 14 Jun 2016 03:54:57 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/force-unwrapping-swift-optionals-code-smell/</guid>
      <description>Do you find your Swift code riddled with !&amp;#8216;s?
I&amp;rsquo;m becoming more and more uncomfortable with seeing ! throughout my Swift code. It&amp;rsquo;s just a matter of time before it&amp;rsquo;s going to bite me.
Often, I do it because it&amp;rsquo;s the &amp;ldquo;easy thing&amp;#8221; to do at the time. But it&amp;rsquo;s dangerous.
Swift optionals are trying to help us. They force us to deal with the possibility of something not having a value.</description>
    </item>
    
    <item>
      <title>Swift Optionals?  Don’t Forget to Unwrap!</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/swift-language-notes/swift-optionals-dont-forget-to-unwrap/</link>
      <pubDate>Sat, 26 Jul 2014 02:23:53 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/swift-language-notes/swift-optionals-dont-forget-to-unwrap/</guid>
      <description>There is a compiler error that throws me off every time I see it. It takes the form,
 &amp;#8216;ClassName?&amp;rsquo; does not have a member named &amp;#8216;memberName&amp;rsquo;
 This can happen when you&amp;rsquo;ve declared a variable as an optional, but forget to unwrap that optional when you attempt to call a method on it.
For example, given this class definition:
1class Bird { 2	var family: String 3	var color: String 4 5	init(family: String, color: String) { 6	self.</description>
    </item>
    
  </channel>
</rss>