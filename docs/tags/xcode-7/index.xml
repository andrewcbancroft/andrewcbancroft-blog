<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xcode 7 on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/xcode-7/</link>
    <description>Recent content in Xcode 7 on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Jun 2015 17:43:09 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/xcode-7/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Improvements to Unit Testing in Swift with Xcode 7</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/testing/improvements-to-unit-testing-in-swift-with-xcode-7/</link>
      <pubDate>Wed, 10 Jun 2015 17:43:09 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/testing/improvements-to-unit-testing-in-swift-with-xcode-7/</guid>
      <description>One of the most exciting things that&amp;rsquo;s come out of WWDC 2015 is the fact that unit testing in Swift has been greatly simplified. The latest announcements have actually rendered a few of my articles on the subject obsolete, once Xcode 7 is in full circulation among the Swift developer community.
If you&amp;rsquo;re using Xcode 6.x, you may still find use in a couple of my previous articles:
 Swift Access Control – Implications for Unit Testing Testability Tip for Swift Developers – Public Over Private  If you&amp;rsquo;re jumping headlong into Xcode 7 world, setting yourself up for unit testing is incredibly simple.</description>
    </item>
    
  </channel>
</rss>