<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Abstract Class on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/abstract-class/</link>
    <description>Recent content in Abstract Class on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Aug 2015 03:52:25 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/abstract-class/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Analyzing Swift Protocol Extensions and C# Abstract Classes</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/analyzing-swift-protocol-extensions-and-c-abstract-classes/</link>
      <pubDate>Fri, 07 Aug 2015 03:52:25 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/analyzing-swift-protocol-extensions-and-c-abstract-classes/</guid>
      <description>Being a C# developer by day and a Swift developer by night has me constantly thinking about the similarities and differences between these two languages. I genuinely enjoy programming with each, and I love it when I can take a strategy that works well in one language, and see where that might cross over to the other. One of the areas I&amp;rsquo;ve been pondering as of late is the idea of how Swift and C# compare in terms of protocol extensions and abstract classes.</description>
    </item>
    
  </channel>
</rss>