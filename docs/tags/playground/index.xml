<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Playground on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/playground/</link>
    <description>Recent content in Playground on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Jul 2016 20:48:54 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/playground/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using a Core Data Model in Swift Playgrounds</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/data-persistence/using-a-core-data-model-in-swift-playgrounds/</link>
      <pubDate>Sun, 10 Jul 2016 20:48:54 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/data-persistence/using-a-core-data-model-in-swift-playgrounds/</guid>
      <description>Did you know that you can tinker with Core Data inside of Swift playgrounds in Xcode? You can!
Jeremiah Jessel, author at http://www.learncoredata.com, wrote up an article in 2015 detailing how you can use the Core Data framework inside a playground. He shows how you can do everything from setting up the Core Data stack, to creating NSManagedObjects programmatically in code. Great stuff!
After I read his guide, I got to thinking: I wonder if you can take an .</description>
    </item>
    
    <item>
      <title>Create Documentation for your Swift Playground</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/xcode/create-documentation-for-your-swift-playground/</link>
      <pubDate>Wed, 10 Sep 2014 03:44:16 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/xcode/create-documentation-for-your-swift-playground/</guid>
      <description>As I opened Apple&amp;rsquo;s latest &amp;ldquo;Patterns Playground&amp;#8221; blog post, I was impressed with the look and feel. Rather than create the documentation as comment blocks, they managed to put in sharp-looking notes and explanations before each code example / experiment. It&amp;rsquo;s like an interactive book, reminiscent of the Swift Programming Language iBook! Here&amp;rsquo;s a snippet of what their Playground looks like:

Of course, my immediate question / thought was, &amp;ldquo;How&amp;rsquo;d they do that?</description>
    </item>
    
  </channel>
</rss>