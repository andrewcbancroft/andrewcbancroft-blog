<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Precision on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/precision/</link>
    <description>Recent content in Precision on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Mar 2017 20:57:27 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/precision/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Entity Framework Tip â€“ Specifying Decimal Precision</title>
      <link>https://www.andrewcbancroft.com/blog/dot-net-development/entity-framework-tip-specifying-decimal-precision/</link>
      <pubDate>Wed, 29 Mar 2017 20:57:27 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/dot-net-development/entity-framework-tip-specifying-decimal-precision/</guid>
      <description>By default, Entity Framework takes the .Net decimal Type and maps it to SQL Server&amp;rsquo;s decimal(18,2) data type.
If you&amp;rsquo;ve got a property on an Entity that is of Type decimal, but down in your database, you&amp;rsquo;re allowing for greater precision than 2 decimal places (scale is actually the proper term for the number of places after the decimal), you need to tell Entity Framework this information. Otherwise, decimal values that you save to your database will be truncated at the default 2 decimal places.</description>
    </item>
    
  </channel>
</rss>