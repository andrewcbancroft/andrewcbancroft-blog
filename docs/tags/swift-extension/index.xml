<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift Extension on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/swift-extension/</link>
    <description>Recent content in Swift Extension on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Apr 2017 18:01:23 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/swift-extension/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Swift Tip – Accessing a User’s Documents Directory with URL Extension</title>
      <link>https://www.andrewcbancroft.com/2017/04/10/swift-tip-accessing-a-users-documents-directory-with-url-extension/</link>
      <pubDate>Mon, 10 Apr 2017 18:01:23 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2017/04/10/swift-tip-accessing-a-users-documents-directory-with-url-extension/</guid>
      <description>When you need to access the documents directory on a user&amp;#8217;s device, what do you do?
In the past, I know I&amp;#8217;ve gotten used to typing out the same set of code over and over throughout my apps. I know, I know &amp;#8211; DRY &amp;#8211; don&amp;#8217;t repeat yourself.
One way to simplify this is to use a Swift extension to URL. Doing this will help you centralize where this code is located in your app, and keep your code DRY.</description>
    </item>
    
    <item>
      <title>The 5 W’s of Swift Extensions</title>
      <link>https://www.andrewcbancroft.com/2014/11/03/the-5-ws-of-swift-extensions/</link>
      <pubDate>Mon, 03 Nov 2014 19:04:19 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/11/03/the-5-ws-of-swift-extensions/</guid>
      <description>For newcomers to Swift, the concept of extending a Type may be new, so I thought I&amp;#8217;d share a high-level overview of Swift extensions in the style of asking the 5 W&amp;#8217;s: Who? What? When? Where? Why?
Who &amp;#8220;Swift developers&amp;#8221; is a pretty obvious answer, but here are a scenarios to ask yourself about to see if you could make use of Swift extensions:
 &amp;#8220;I am relying on Types that are found in 3rd party frameworks or libraries and I wish I could add a little bit of functionality that isn&amp;#8217;t there out of the box.</description>
    </item>
    
    <item>
      <title>Slide In Animation in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/09/24/slide-in-animation-in-swift/</link>
      <pubDate>Wed, 24 Sep 2014 18:25:52 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/09/24/slide-in-animation-in-swift/</guid>
      <description>In a previous post about fade animations in Swift, I demonstrated how to use a class extension to add the ability for any UIView instance to easily call fadeIn() or fadeOut() on itself. This strategy was nice &amp;#8211; the animations, while simple, would have cluttered my code each time I used them, had I not encapsulated them somewhere. Employing class extensions in Swift seemed a natural way to provide this functionality to UIViews.</description>
    </item>
    
    <item>
      <title>Fade In / Out Animations as Class Extensions in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/07/27/fade-in-out-animations-as-class-extensions-with-swift/</link>
      <pubDate>Sun, 27 Jul 2014 20:13:53 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/27/fade-in-out-animations-as-class-extensions-with-swift/</guid>
      <description>Updated on December 6, 2016 &amp;#8211; Xcode 8 &amp;amp; Swift 3.0
The question has been asked (and solved) on StackOverflow in Objective-C, but my aim in this post is to take the Objective-C implementation and leverage Swift extensions to make this job even easier to achieve and reuse.
Jump to&amp;#8230;   Fading without an extension   Refactoring using Swift extensions    Step 1 &amp;#8211; Create UIViewExtensions.</description>
    </item>
    
  </channel>
</rss>