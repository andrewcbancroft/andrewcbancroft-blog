<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extensions on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/extensions/</link>
    <description>Recent content in Extensions on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Apr 2015 17:52:36 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/extensions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>3 Nuances of Swift Extensions</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/swift-language-notes/3-nuances-of-swift-extensions/</link>
      <pubDate>Wed, 22 Apr 2015 17:52:36 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/swift-language-notes/3-nuances-of-swift-extensions/</guid>
      <description>How often do we take an initial cursory look at some documentation, shake our heads and say, &amp;ldquo;Ok, sure! Got it!&amp;#8221;, and then some time later get to the actual usage of that perceived understanding only to find out, &amp;ldquo;Woah – this is behaving differently than I expected! I wonder if the documentation says anything about this?!&amp;#8221;
A few discussions I&amp;rsquo;ve had recently have prompted me to question what I thought I knew about Swift extensions.</description>
    </item>
    
    <item>
      <title>Send a Type to Obedience School – Using Swift Extensions for Additional Protocol Conformance</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/send-a-type-to-obedience-school-using-swift-extensions-for-additional-protocol-conformance/</link>
      <pubDate>Tue, 02 Dec 2014 19:15:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/send-a-type-to-obedience-school-using-swift-extensions-for-additional-protocol-conformance/</guid>
      <description>Did you know that you can make any Type (here meaning Class, Enumeration, or Struct), even already-existing ones that you don&amp;rsquo;t have the source code for, adopt a protocol that it doesn&amp;rsquo;t normally conform to out of the box?
You can – even if you don&amp;rsquo;t have the original source code for that Type! It&amp;rsquo;s a powerful and intriguing proposition. Let&amp;rsquo;s explore how this is possible.
How, you ask? Well, as the title of this article suggests, Swift extensions are the way to do it.</description>
    </item>
    
  </channel>
</rss>