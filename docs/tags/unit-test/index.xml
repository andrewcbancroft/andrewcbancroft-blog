<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unit Test on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/unit-test/</link>
    <description>Recent content in Unit Test on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Mar 2015 01:46:59 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/unit-test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An (Almost) TDD Workflow in Swift</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/testing/an-almost-tdd-workflow-in-swift/</link>
      <pubDate>Wed, 11 Mar 2015 01:46:59 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/testing/an-almost-tdd-workflow-in-swift/</guid>
      <description>There are times when it feels paralyzing to write tests first before any production code is written. Even with good requirements documentation, I often find myself asking, &amp;ldquo;How am I supposed to write a test to verify x about some thing that doesn&amp;rsquo;t exist in actual code yet?&amp;#8221; It can be crippling.
The following is a workflow that&amp;rsquo;s helped me grow in my test-first development skills. When I find myself staring at the screen, paralyzed because I&amp;rsquo;m &amp;ldquo;not supposed to write actual production code until the test is written&amp;#8221;, I often turn to the workflow that I&amp;rsquo;m about to describe to help me break through to being productive.</description>
    </item>
    
    <item>
      <title>Swift Access Control – Implications for Unit Testing</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/testing/swift-access-control-implications-for-unit-testing/</link>
      <pubDate>Wed, 23 Jul 2014 04:04:43 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/testing/swift-access-control-implications-for-unit-testing/</guid>
      <description>If you find yourself with broken unit tests, failing to build with the error, “Use of unresolved identifier&amp;#8230;”, you&amp;rsquo;re not alone!
Unit Tests and Swift Access Control When Swift access control came into the picture, we suddenly had a little more to consider. From the Apple docs:
Swift access control has three access levels:
 private entities can only be accessed from within the source file where they are defined.</description>
    </item>
    
    <item>
      <title>How to Create Mocks and Stubs in Swift</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/testing/how-to-create-mocks-and-stubs-in-swift/</link>
      <pubDate>Tue, 15 Jul 2014 05:12:16 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/testing/how-to-create-mocks-and-stubs-in-swift/</guid>
      <description>Without 100% support for a mocking framework like OCMock, I found myself needing to get creative when building&amp;nbsp;mock objects and method stubs in Swift unit tests. &amp;nbsp;The great thing about testing is that you&amp;rsquo;re&amp;#8230;well&amp;#8230;&amp;nbsp;testing things out to see if they&amp;rsquo;ll work, and I found a solution that I&amp;rsquo;m pretty happy&amp;nbsp;with for now. &amp;nbsp;I&amp;rsquo;m open to better ways, so leave a comment if you&amp;rsquo;ve had good results using a different design!</description>
    </item>
    
  </channel>
</rss>