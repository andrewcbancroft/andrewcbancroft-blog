<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TDD on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/tdd/</link>
    <description>Recent content in TDD on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Apr 2015 18:52:11 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/tdd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testability Tip for Swift Developers – Public Over Private</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/testing/testability-tip-for-swift-developers-public-over-private/</link>
      <pubDate>Wed, 15 Apr 2015 18:52:11 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/testing/testability-tip-for-swift-developers-public-over-private/</guid>
      <description>Quite often in unit testing, especially when practicing Test-Driven Development, I find myself wanting to test every single line of code. When I run up against a private function, however, I often scratch my head and ask, &amp;ldquo;How am I supposed to test this??&amp;#8221;.
Most experienced testers will tell you, &amp;ldquo;Don&amp;rsquo;t test private implementation – only public API&amp;#8221;.
&amp;ldquo;Okay&amp;#8230; But how, does that private function get tested?&amp;#8221;, I always asked.</description>
    </item>
    
    <item>
      <title>An (Almost) TDD Workflow in Swift</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/testing/an-almost-tdd-workflow-in-swift/</link>
      <pubDate>Wed, 11 Mar 2015 01:46:59 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/testing/an-almost-tdd-workflow-in-swift/</guid>
      <description>There are times when it feels paralyzing to write tests first before any production code is written. Even with good requirements documentation, I often find myself asking, &amp;ldquo;How am I supposed to write a test to verify x about some thing that doesn&amp;rsquo;t exist in actual code yet?&amp;#8221; It can be crippling.
The following is a workflow that&amp;rsquo;s helped me grow in my test-first development skills. When I find myself staring at the screen, paralyzed because I&amp;rsquo;m &amp;ldquo;not supposed to write actual production code until the test is written&amp;#8221;, I often turn to the workflow that I&amp;rsquo;m about to describe to help me break through to being productive.</description>
    </item>
    
    <item>
      <title>TDD for iOS in Swift – What’s the Goal?</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/testing/tdd-ios-swift-whats-goal/</link>
      <pubDate>Tue, 16 Dec 2014 12:00:10 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/testing/tdd-ios-swift-whats-goal/</guid>
      <description>Before actually doing Test Driven Development (TDD) for your iOS / Mac app, it&amp;rsquo;s really important to ask a very fundamental question: What&amp;rsquo;s the goal? What am I aiming for when I say I want to drive my iOS development with tests?
2 Goals of TDD in iOS A recent course I watched on Pluralsight called TDD as a Design Tool gave me some insight on two goals for doing Test Driven Development:</description>
    </item>
    
  </channel>
</rss>