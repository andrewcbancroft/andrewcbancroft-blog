<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NSFetchedResultsController on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/nsfetchedresultscontroller/</link>
    <description>Recent content in NSFetchedResultsController on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 May 2015 03:20:54 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/nsfetchedresultscontroller/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sync Table View Data: NSFetchedResultsController and Swift</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/ui-work/sync-table-view-data-nsfetchedresultscontroller-swift/</link>
      <pubDate>Fri, 29 May 2015 03:20:54 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/ui-work/sync-table-view-data-nsfetchedresultscontroller-swift/</guid>
      <description>Updated on September 23, 2015 – Swift 2.0
My goal with this article is to help you utilize the full power of NSFetchedResultsController.
This is a continuation on a series of articles I&amp;rsquo;ve written on Core Data and NSFetchedResultsController, so you may want to check out those previous posts to get an idea of where I&amp;rsquo;m picking up in this walk-through. Previously I touched on how to seed a Core Data database, and how to take that data and display it in a table view with an NSFetchedResultsController.</description>
    </item>
    
    <item>
      <title>Displaying Data With NSFetchedResultsController and Swift</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/data-persistence/displaying-data-with-nsfetchedresultscontroller-and-swift/</link>
      <pubDate>Thu, 05 Mar 2015 15:14:53 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/data-persistence/displaying-data-with-nsfetchedresultscontroller-and-swift/</guid>
      <description>Updated on September 23, 2015 – Swift 2.0
The combination of an NSFetchedResultsController and a UITableView provides a powerful way to integrate Core Data with a user interface. The greatest benefits of using NSFetchedResultsController come when we use it to automatically update a table view when objects are added, updated, or removed from a Core Data data store. First things first, though&amp;#8230;
With a Core Data data store seeded with data, the next logical step is to display that data somewhere other than the console.</description>
    </item>
    
  </channel>
</rss>