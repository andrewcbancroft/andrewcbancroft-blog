<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Animation on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/animation/</link>
    <description>Recent content in Animation on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Oct 2014 02:57:24 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/animation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rotate Animation in Swift</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/swift-how-tos/rotate-animation-in-swift/</link>
      <pubDate>Thu, 16 Oct 2014 02:57:24 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/swift-how-tos/rotate-animation-in-swift/</guid>
      <description>Updated on December 14, 2015 – Swift 2.0 + new examples
With this post, I intend to wrap up my series on&amp;nbsp;animations as UIView Extensions in Swift&amp;#8230; for now. &amp;nbsp;Truthfully, these ideas flowed out of a real-world app that I was working on, which required various simple animations (fading in/out, sliding text, and now, rotating a view&amp;nbsp;360 degrees).
Since I&amp;rsquo;ve given two other detailed walk-throughs on the topic, I&amp;rsquo;ll try to be to-the-point on this one.</description>
    </item>
    
    <item>
      <title>Fade In / Out Animations as Class Extensions in Swift</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/swift-how-tos/fade-in-out-animations-as-class-extensions-with-swift/</link>
      <pubDate>Sun, 27 Jul 2014 20:13:53 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/swift-how-tos/fade-in-out-animations-as-class-extensions-with-swift/</guid>
      <description>Updated on December 6, 2016 – Xcode 8 &amp;amp; Swift 3.0
The question has been asked (and solved) on StackOverflow in Objective-C, but my aim in this post is to take the Objective-C implementation and leverage Swift extensions to make this job even easier to achieve and reuse.
Fade animations basically involve adjusting a UIView&amp;#8216;s alpha value from 1.0 to 0.0 (fade out) or 0.0 to 1.0 (fade in) over a specified duration using some kind of easing option (like starting fast, then slowing down at the end of the animation, or starting slow and speeding up at the end of the animation).</description>
    </item>
    
  </channel>
</rss>