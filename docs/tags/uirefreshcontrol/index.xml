<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UIRefreshControl on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/uirefreshcontrol/</link>
    <description>Recent content in UIRefreshControl on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Mar 2015 17:55:52 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/uirefreshcontrol/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basics of Pull to Refresh for Swift Developers</title>
      <link>https://www.andrewcbancroft.com/2015/03/17/basics-of-pull-to-refresh-for-swift-developers/</link>
      <pubDate>Tue, 17 Mar 2015 17:55:52 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/03/17/basics-of-pull-to-refresh-for-swift-developers/</guid>
      <description>Updated on September 21, 2016 &amp;#8211; Swift 3.0
Implementing &amp;#8220;pull to refresh&amp;#8221; is a common need that arises when working with table views. There are typically two scenarios that folks find themselves in when attempting to implement this feature:
 They&amp;#8217;re working with a UITableViewController They&amp;#8217;re working with a non-UITableViewController, but their view incorporates a regular UITableView, either taking up the whole screen, or a smaller portion of it  This entry will explore both scenarios to help you get up and running quickly with implementing pull to refresh for your Swift iOS app.</description>
    </item>
    
  </channel>
</rss>