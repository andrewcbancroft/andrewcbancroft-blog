<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL Server on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/sql-server/</link>
    <description>Recent content in SQL Server on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Mar 2017 16:38:33 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/sql-server/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Solving ‘Spatial types and functions are not available’ with Entity Framework</title>
      <link>https://www.andrewcbancroft.com/blog/dot-net-development/solving-spatial-types-and-functions-are-not-available-with-entity-framework/</link>
      <pubDate>Mon, 27 Mar 2017 16:38:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/dot-net-development/solving-spatial-types-and-functions-are-not-available-with-entity-framework/</guid>
      <description>Using SQL Server&amp;rsquo;s Geospatial features with Entity Framework is awesome. I was crusing along just fine with using DbGeography for an ASP.Net application I&amp;rsquo;m working on&amp;#8230; Right up until I deployed to the server. Yep. It worked on my machine, but alas, I was hitting a runtime exception on my test server.
This was the exception:
 Spatial types and functions are not available for this provider because the assembly &amp;#8216;Microsoft.</description>
    </item>
    
    <item>
      <title>SQL Sever Synonyms, Entity Framework, &amp; Integrated Security</title>
      <link>https://www.andrewcbancroft.com/blog/dot-net-development/using-sql-sever-synonyms-entity-framework-integrated-security/</link>
      <pubDate>Fri, 01 May 2015 17:44:31 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/dot-net-development/using-sql-sever-synonyms-entity-framework-integrated-security/</guid>
      <description>Scenario This may be an edge case, but I spent enough time (a couple of days) spinning on this that I thought it warranted a signpost on the Internet.
Suppose we have the following scenario before us:
Basics
 We&amp;rsquo;re building an ASP.Net web application Entity Framework has been chosen as our ORM SQL Server (any version supporting Synonyms) is our backend database server of choice  Details</description>
    </item>
    
  </channel>
</rss>