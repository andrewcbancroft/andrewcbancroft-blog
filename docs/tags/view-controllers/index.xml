<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>View Controllers on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/view-controllers/</link>
    <description>Recent content in View Controllers on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Aug 2014 04:43:29 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/view-controllers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pick a Delegate… Any Delegate… On Clean View Controllers in Swift</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/pick-a-delegate-clean-view-controllers-in-swift/</link>
      <pubDate>Wed, 27 Aug 2014 04:43:29 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/pick-a-delegate-clean-view-controllers-in-swift/</guid>
      <description>The delegation pattern is ubiquitous in iOS development – the pattern is&amp;nbsp;a &amp;ldquo;core competency&amp;#8221; for developing in Cocoa, and if you program with the iOS SDK for any length of time and you&amp;rsquo;ll end up writing some code that&amp;nbsp;resembles&amp;nbsp;someInstance.delegate = someDelegate.
One of the toughest things that I&amp;rsquo;ve experienced is choosing what someDelegate&amp;nbsp;is. &amp;nbsp;All too often, a&amp;nbsp;View Controller ends up being assigned the responsibility of&amp;nbsp;being the delegate for everything in its hierarchy.</description>
    </item>
    
  </channel>
</rss>