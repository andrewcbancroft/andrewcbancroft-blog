<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ARC on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/arc/</link>
    <description>Recent content in ARC on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 May 2015 18:01:09 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/arc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Strong, Weak, and Unowned â€“ Sorting out ARC and Swift</title>
      <link>https://www.andrewcbancroft.com/2015/05/08/strong-weak-and-unowned-sorting-out-arc-and-swift/</link>
      <pubDate>Fri, 08 May 2015 18:01:09 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2015/05/08/strong-weak-and-unowned-sorting-out-arc-and-swift/</guid>
      <description>I&amp;#8217;m willing to bet that a good number of Swift developers struggle with the particulars of how strong, weak, and unowned affect the run-time behavior of their code. I, myself, wouldn&amp;#8217;t want to have to give an explanation of the finer points of Automatic Reference Counting (ARC) if my life depended on it.
I wanted to stop being unsure about the implications of typing one of those three words before variable / constant declarations, so I finally pulled up the Apple Documentation on ARC and began trying to digest the semantics.</description>
    </item>
    
  </channel>
</rss>