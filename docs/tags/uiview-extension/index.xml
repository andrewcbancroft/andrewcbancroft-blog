<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UIView Extension on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/uiview-extension/</link>
    <description>Recent content in UIView Extension on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Oct 2014 02:57:24 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/uiview-extension/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rotate Animation in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/10/15/rotate-animation-in-swift/</link>
      <pubDate>Thu, 16 Oct 2014 02:57:24 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/10/15/rotate-animation-in-swift/</guid>
      <description>Updated on December 14, 2015 &amp;#8211; Swift 2.0 + new examples
With this post, I intend to wrap up my series on&amp;nbsp;animations as UIView Extensions in Swift&amp;#8230; for now. &amp;nbsp;Truthfully, these ideas flowed out of a real-world app that I was working on, which required various simple animations (fading in/out, sliding text, and now, rotating a view&amp;nbsp;360 degrees).
Since I&amp;#8217;ve given two other detailed walk-throughs on the topic, I&amp;#8217;ll try to be to-the-point on this one.</description>
    </item>
    
    <item>
      <title>Slide In Animation in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/09/24/slide-in-animation-in-swift/</link>
      <pubDate>Wed, 24 Sep 2014 18:25:52 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/09/24/slide-in-animation-in-swift/</guid>
      <description>In a previous post about fade animations in Swift, I demonstrated how to use a class extension to add the ability for any UIView instance to easily call fadeIn() or fadeOut() on itself. This strategy was nice &amp;#8211; the animations, while simple, would have cluttered my code each time I used them, had I not encapsulated them somewhere. Employing class extensions in Swift seemed a natural way to provide this functionality to UIViews.</description>
    </item>
    
    <item>
      <title>Fade In / Out Animations as Class Extensions in Swift</title>
      <link>https://www.andrewcbancroft.com/2014/07/27/fade-in-out-animations-as-class-extensions-with-swift/</link>
      <pubDate>Sun, 27 Jul 2014 20:13:53 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/27/fade-in-out-animations-as-class-extensions-with-swift/</guid>
      <description>Updated on December 6, 2016 &amp;#8211; Xcode 8 &amp;amp; Swift 3.0
The question has been asked (and solved) on StackOverflow in Objective-C, but my aim in this post is to take the Objective-C implementation and leverage Swift extensions to make this job even easier to achieve and reuse.
Jump to&amp;#8230;   Fading without an extension   Refactoring using Swift extensions    Step 1 &amp;#8211; Create UIViewExtensions.</description>
    </item>
    
  </channel>
</rss>