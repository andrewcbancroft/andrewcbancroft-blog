<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Use of unresolved identifier on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/use-of-unresolved-identifier/</link>
    <description>Recent content in Use of unresolved identifier on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Jul 2014 04:04:43 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/use-of-unresolved-identifier/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Swift Access Control – Implications for Unit Testing</title>
      <link>https://www.andrewcbancroft.com/2014/07/22/swift-access-control-implications-for-unit-testing/</link>
      <pubDate>Wed, 23 Jul 2014 04:04:43 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/2014/07/22/swift-access-control-implications-for-unit-testing/</guid>
      <description>If you find yourself with broken unit tests, failing to build with the error, “Use of unresolved identifier&amp;#8230;”, you&amp;#8217;re not alone!
Unit Tests and Swift Access Control When Swift access control came into the picture, we suddenly had a little more to consider. From the Apple docs:
Swift access control has three access levels:
 private entities can only be accessed from within the source file where they are defined.</description>
    </item>
    
  </channel>
</rss>