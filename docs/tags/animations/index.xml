<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Animations on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/animations/</link>
    <description>Recent content in Animations on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Sep 2014 18:25:52 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/animations/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Slide In Animation in Swift</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/swift-how-tos/slide-in-animation-in-swift/</link>
      <pubDate>Wed, 24 Sep 2014 18:25:52 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/swift-how-tos/slide-in-animation-in-swift/</guid>
      <description>In a previous post about fade animations in Swift, I demonstrated how to use a class extension to add the ability for any UIView instance to easily call fadeIn() or fadeOut() on itself. This strategy was nice â€“ the animations, while simple, would have cluttered my code each time I used them, had I not encapsulated them somewhere. Employing class extensions in Swift seemed a natural way to provide this functionality to UIViews.</description>
    </item>
    
  </channel>
</rss>