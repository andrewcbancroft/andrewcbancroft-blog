<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Protocols on Andrew Bancroft</title>
    <link>https://www.andrewcbancroft.com/tags/protocols/</link>
    <description>Recent content in Protocols on Andrew Bancroft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 May 2016 17:59:16 +0000</lastBuildDate>
    
	<atom:link href="https://www.andrewcbancroft.com/tags/protocols/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working with Swift:  Adopt a Protocol or Pass a Function?</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/working-with-swift-adopt-a-protocol-or-pass-a-function/</link>
      <pubDate>Thu, 05 May 2016 17:59:16 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/working-with-swift-adopt-a-protocol-or-pass-a-function/</guid>
      <description>Without fail, any time Rob Napier (@cocoaphony) speaks or writes, I gain insight into new and deeper ways to solve problems with Swift.
In January 2016, he gave a talk at dotSwift, and I wanted to record my thoughts on something he said that made a lot of sense when it comes to the topic of, &amp;ldquo;Should I create and adopt a protocol for this Type I&amp;rsquo;m creating, or should I just pass it a function instead?</description>
    </item>
    
    <item>
      <title>Analyzing Swift Protocol Extensions and C# Abstract Classes</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/analyzing-swift-protocol-extensions-and-c-abstract-classes/</link>
      <pubDate>Fri, 07 Aug 2015 03:52:25 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/analyzing-swift-protocol-extensions-and-c-abstract-classes/</guid>
      <description>Being a C# developer by day and a Swift developer by night has me constantly thinking about the similarities and differences between these two languages. I genuinely enjoy programming with each, and I love it when I can take a strategy that works well in one language, and see where that might cross over to the other. One of the areas I&amp;rsquo;ve been pondering as of late is the idea of how Swift and C# compare in terms of protocol extensions and abstract classes.</description>
    </item>
    
    <item>
      <title>Send a Type to Obedience School – Using Swift Extensions for Additional Protocol Conformance</title>
      <link>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/send-a-type-to-obedience-school-using-swift-extensions-for-additional-protocol-conformance/</link>
      <pubDate>Tue, 02 Dec 2014 19:15:33 +0000</pubDate>
      
      <guid>https://www.andrewcbancroft.com/blog/ios-development/patterns-and-practices/send-a-type-to-obedience-school-using-swift-extensions-for-additional-protocol-conformance/</guid>
      <description>Did you know that you can make any Type (here meaning Class, Enumeration, or Struct), even already-existing ones that you don&amp;rsquo;t have the source code for, adopt a protocol that it doesn&amp;rsquo;t normally conform to out of the box?
You can – even if you don&amp;rsquo;t have the original source code for that Type! It&amp;rsquo;s a powerful and intriguing proposition. Let&amp;rsquo;s explore how this is possible.
How, you ask? Well, as the title of this article suggests, Swift extensions are the way to do it.</description>
    </item>
    
  </channel>
</rss>